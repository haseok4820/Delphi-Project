unit uNav;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, dxGDIPlusClasses, Vcl.ExtCtrls;

type
  TForm_Nav = class(TForm)
    Panel_Header: TPanel;
    Image_Cancel: TImage;
    Label_title: TLabel;
    Panel_Body: TPanel;
    Label_CR: TLabel;
    Timer_Key: TTimer;
    procedure Image_CancelClick(Sender: TObject);
    procedure Label_SideNavClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Label_SideNavOnMouseEnter(Sender: TObject);
    procedure Label_SideNavOnMouseLeave(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Timer_KeyTimer(Sender: TObject);
  private
    { Private declarations }
    procedure GetSideNavList;

  public
    { Public declarations }
  end;

var
  Form_Nav: TForm_Nav;
  iTag: Byte;

implementation

{$R *.dfm}

uses uDM, uMain;

procedure TForm_Nav.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  OnKeyDown := nil;
end;

procedure TForm_Nav.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  KeyPreview := False;
  OnKeyDown := nil;
end;

procedure TForm_Nav.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
const
  CATEGORY_1 = 49;
  CATEGORY_2 = 50;
  CATEGORY_3 = 51;
begin
  Application.ProcessMessages;
  if (Key in [CATEGORY_1 .. CATEGORY_3]) then
  begin
    iTag := Key - CATEGORY_1;
    if (Timer_Key.Enabled = False) then
      Timer_Key.Enabled := True;
  end
  else if Key = 27 then
  begin
    AnimateWindow(Self.Handle, 200, AW_HOR_NEGATIVE or AW_HIDE);
    ModalResult := mrCancel;
  end;
end;

procedure TForm_Nav.FormShow(Sender: TObject);
begin
  Label_title.Hint := StoreName + ' - ' + IntTOStr(PosNo);
  Label_CR.Caption := 'Copyright 2003~' + FormatDateTime('YYYY', NOW) + ' AIRPOS Co., Ltd.  All ights Reserved.';
  Top := Form_AirManager.Top;
  Left := Form_AirManager.Left;
  Height := Form_AirManager.Height;

  AnimateWindow(Self.Handle, 200, AW_HOR_POSITIVE);
  GetSideNavList;

  KeyPreview := True;
  OnKeyDown := FormKeyDown;
end;

procedure TForm_Nav.GetSideNavList;
var
  i: Byte;
begin
  for i := Low(arrSideNAv_Category) to High(arrSideNAv_Category) do
  begin
    with TLabel.Create(Self) do
    begin
      Parent := Panel_Body;
      AutoSize := False;

      Align := alBottom;
      Tag := i;
      Name := 'SideNav_Category' + IntTOStr(i);
      Caption := '   ' + arrSideNAv_Category[i];

      alignment := taLeftJustify;
      Layout := tlCenter;
      Height := 50;
      Align := alTop;

      onClick := Label_SideNavClick;
      OnMouseEnter := Label_SideNavOnMouseEnter;
      OnMouseLeave := Label_SideNavOnMouseLeave;

    end;
  end;
end;

procedure TForm_Nav.Image_CancelClick(Sender: TObject);
begin
  AnimateWindow(Self.Handle, 200, AW_HOR_NEGATIVE or AW_HIDE);
  ModalResult := mrCancel;
end;

procedure TForm_Nav.Label_SideNavClick(Sender: TObject);
begin
  Label_SideNavOnMouseLeave(Sender);
  Tag := (Sender as TLabel).Tag;
  Hint := (Sender as TLabel).Caption;
  ModalResult := mrOK;
end;

procedure TForm_Nav.Label_SideNavOnMouseEnter(Sender: TObject);
begin
  with (Sender as TLabel) do
  begin
    font.Style := [fsBold];
    Caption := StringReplace(Caption, ' ', '¢º', [rfIgnoreCase]);
  end;
end;

procedure TForm_Nav.Label_SideNavOnMouseLeave(Sender: TObject);
begin
  with (Sender as TLabel) do
  begin
    font.Style := [];
    Caption := StringReplace(Caption, '¢º', ' ', [rfIgnoreCase]);
  end;
end;

procedure TForm_Nav.Timer_KeyTimer(Sender: TObject);
var
  SelLabel : TLabel;
begin
  Timer_Key.Enabled := False;
  SelLabel := FindComponent('SideNav_Category' + IntTOStr(iTag)) as TLabel);
  Label_SideNavClick(SelLabel);
end;

end.
