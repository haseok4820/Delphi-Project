unit ufmPrnTest;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics, Vcl.Printers, Winapi.ShellAPI,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, dxGDIPlusClasses, Vcl.ExtCtrls, CPort;

type
  TfmPrnTest = class(TForm)
    Panel_Header: TPanel;
    Image_Cancel: TImage;
    Label_title: TLabel;
    RadioGroup_Baudrate: TRadioGroup;
    RadioGroup_PortList: TRadioGroup;
    ComPort_Test: TComPort;
    Timer_TimeOut: TTimer;
    Panel_footer: TPanel;
    Button_Print: TButton;
    Button_Refrush: TButton;
    procedure FormShow(Sender: TObject);
    procedure Button_PrintClick(Sender: TObject);
    procedure Image_CancelClick(Sender: TObject);
    procedure Button_RefrushClick(Sender: TObject);
    procedure Timer_TimeOutTimer(Sender: TObject);
    procedure Label_titleMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure ComPort_TestError(Sender: TObject; Errors: TComErrors);
    procedure ComPort_TestException(Sender: TObject; TComException: TComExceptions; ComportMessage: string; WinError: Int64;
      WinMessage: string);
  private
    { Private declarations }
    procedure LoadPortList;

  public
    { Public declarations }
  end;

var
  fmPrnTest: TfmPrnTest;

implementation

{$R *.dfm}

uses uDM;

procedure TfmPrnTest.Button_PrintClick(Sender: TObject);
var
  sl: TStringList;
  i: Integer;
begin
  Button_Print.Caption := '출력중.. 잠시만 기다려주세요.';
  Button_Print.Enabled := False;

  if Tag = 0 then
  begin
    Application.ProcessMessages;
    Timer_TimeOut.Enabled := True;
    with ComPort_Test do
    begin
      TRY
        sl := TStringList.Create;
        try
          Port := RadioGroup_PortList.Items[RadioGroup_PortList.ItemIndex];
          case RadioGroup_Baudrate.ItemIndex of
            0:
              BaudRate := br9600;
            1:
              BaudRate := br19200;
            2:
              BaudRate := br38400;
            3:
              BaudRate := br115200;
          end;

          ComPort_Test.Open;
          if Not Connected then
          begin
            ShowMEssage(Port + ' 열기 실패 연결 상태를 확인해주세요.');
            Exit;
          end;

          sl.Add(#$1b + #$40);
          sl.Add(#$1D + #$21 + #$11);
          sl.Add('PORT     : ' + Port + #13#10);
          sl.Add('BaudRate : ' + RadioGroup_Baudrate.Items[RadioGroup_Baudrate.ItemIndex] + #13#10);
          sl.Add(#$1D + #$21 + #$00);
          sl.Add('가나다라마바사아자카파타하');
          sl.Add('ABCDEFGHIJKLMNOPQRSTUVXWYZ');
          for i := 0 to 2 do
            sl.Add(#10#13);
          sl.Add(#$1b + #$6D + #10);

          ComPort_Test.WriteStr(AnsiString(sl.Text));
        except
          ON E: Exception do
          begin
            ShowMEssage('출력실패 : 포트상태 및 연결상태를 확인해주세요.');
          end;

        end;
      FINALLY
        Application.ProcessMessages;
        Timer_TimeOut.Enabled := False;
        ComPort_Test.Close;
      END;
    end;
  end
  else if Tag = 1 then
  begin
  //  ShInvokePrinterCommand(Handle, PRINTACTION_TESTPAGE, PChar(Printer.Printers.Strings[RadioGroup_PortList.ItemIndex]), nil, True);
    Printer.PrinterIndex :=  RadioGroup_PortList.ItemIndex;
    Printer.BeginDoc;
  Printer.Canvas.Font.name := 'Korean1x1';
    Printer.EndDoc;

    ShowMessage('1');
  end;

  Button_Print.Caption := '출력';
  Button_Print.Enabled := True;
end;

procedure TfmPrnTest.Button_RefrushClick(Sender: TObject);
begin
  LoadPortList;
end;

procedure TfmPrnTest.ComPort_TestError(Sender: TObject; Errors: TComErrors);
begin
  Application.ProcessMessages;
  Timer_TimeOut.Enabled := False;
  ComPort_Test.Close;
  Button_Print.Caption := '출력';
  Button_Print.Enabled := True;

end;

procedure TfmPrnTest.ComPort_TestException(Sender: TObject; TComException: TComExceptions; ComportMessage: string; WinError: Int64;
  WinMessage: string);
begin
  Application.ProcessMessages;
  Timer_TimeOut.Enabled := False;
  ComPort_Test.Close;
  Button_Print.Caption := '출력';
  Button_Print.Enabled := True;
end;

procedure TfmPrnTest.FormShow(Sender: TObject);
begin

  DM.SetBG(0);
  try
    with fmPrnTest, fmPrnTest.ClientRect do
    begin
      SetWindowRgn(Handle, CreateRoundRectRgn(Left, Top, Right + 1, Bottom + 1, 35, 35), True);
      SetWindowPos(Self.Handle, HWND_TOPMOST, Left, Top, Width, Height, 0);
    end;
  except
    ON E: Exception do
    begin
      ShowMEssage('프린터 라운드 처리중 오류 : ' + E.Message);
    end;

  end;
  LoadPortList;
end;

procedure TfmPrnTest.Image_CancelClick(Sender: TObject);
begin
  DM.SetBG(1);
  ModalResult := mrCancel;
end;

procedure TfmPrnTest.Label_titleMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  ReleaseCapture;
  SendMessage(Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
end;

procedure TfmPrnTest.LoadPortList;
var
  Result_IS: TResult_IS;
  sl: TStringList;
  i: Integer;
begin
  RadioGroup_PortList.Items.Clear;

  if Tag = 0 then
    Result_IS := DM.GetComPort
  else
  begin
    Result_IS.Result_int := Printer.Printers.Count;
    Result_IS.Result_Str := '';
    for i := 0 to Printer.Printers.Count - 1 do
      Result_IS.Result_Str := Result_IS.Result_Str + Printer.Printers.Strings[i] + #13#10;
  end;

  if Result_IS.Result_int <> 0 then
  begin
    sl := TStringList.Create;
    try
      sl.Text := Result_IS.Result_Str;
      RadioGroup_PortList.Columns := sl.Count div 12;

      for i := 0 to sl.Count - 1 do
        RadioGroup_PortList.Items.Add(sl[i]);

      RadioGroup_PortList.ItemIndex := 0;
    finally
      sl.Free;
    end;
  end;
end;

procedure TfmPrnTest.Timer_TimeOutTimer(Sender: TObject);
begin
  Application.ProcessMessages;
  Timer_TimeOut.Enabled := False;
  ComPort_Test.Close;
  Button_Print.Caption := '출력';
  Button_Print.Enabled := True;
end;

end.
