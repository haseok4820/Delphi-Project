unit ufmPopup;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls;

type
  TfmPopup = class(TForm)
    Panel_Parent: TPanel;
    Panel_Header: TPanel;
    Label_Msg: TLabel;
    Image_Msg: TImage;
    Panel_Footer: TPanel;
    Image_hide: TImage;
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    procedure GetType(iType: Byte);
    procedure LabelClick_Pad(Sender: TObject);
  public
    { Public declarations }
  end;

var
  fmPopup: TfmPopup;
  LabelList: array of TLabel;

implementation

{$R *.dfm}

uses uMain, uDM;

procedure TfmPopup.LabelClick_Pad(Sender: TObject);
begin
  //
  if Sender is TImage then
  begin
    Tag := (Sender as TImage).Tag;
    Hint := (Sender as TImage).Hint;
  end
  else if Sender is TLabel then
  begin
    Tag := (Sender as TLabel).Tag;
    Hint := (Sender as TLabel).Hint;
  end;
  ModalResult := mrOk;
end;

procedure TfmPopup.FormShow(Sender: TObject);
var
  sErr: String;
begin
  try
    if FindWindow('TForm_AirManager', nil) <> 0 then
    begin
      Top := Form_AirManager.Top;
      Left := Form_AirManager.Left;
      Width := Form_AirManager.Width;
      Height := Form_AirManager.Height;
    end;

  except
    ON E: Exception do
    begin
      sErr := E.Message
    end;
  end;

  Padding.Left := (Width - 500) div 2;
  Padding.Top := (Height - 430) div 2;
  Padding.Right := Padding.Left;
  Padding.Bottom := Padding.Top;

  GetType(Tag);

  DM.SetRound(Panel_Parent);
  SetWindowPos(Self.Handle, HWND_TOPMOST, Left, Top, Width, Height, 0);
  // Label_Sample.Visible := False;
end;

procedure TfmPopup.GetType(iType: Byte);
begin
  // 1 - mrOK, 2 - mrCancel
  case iType of
    0: // 확인만 표시
      begin
        SetLength(LabelList, 1);
        LabelList[0] := TLabel.Create(Self);
        with LabelList[0] do
        begin
          Parent := Panel_Footer;
          align := alClient;
          Layout := tlCenter;
          Alignment := taCenter;

          Name := 'Panel_OK';
          Tag := 1;
          Hint := 'OK';
          Caption := '확인';
          font.Color := $00F0B000;
          OnClick := LabelClick_Pad;
        end;
      end;
    1: // 예, 아니오 표시
      begin
        SetLength(LabelList, 2);
        LabelList[0] := TLabel.Create(Self);
        with LabelList[0] do
        begin
          Parent := Panel_Footer;
          align := alRight;
          Layout := tlCenter;
          Alignment := taCenter;

          Name := 'Panel_OK';
          Tag := 1;
          Hint := 'OK';
          Caption := '예';
          Color := clWhite;
          Transparent := False;
          font.Color := $00F0B000;

          Width := 496 div 2;
          OnClick := LabelClick_Pad;
        end;

        LabelList[1] := TLabel.Create(Self);
        with LabelList[1] do
        begin
          Parent := Panel_Footer;
          align := alLeft;
          Layout := tlCenter;
          Alignment := taCenter;

          Name := 'Panel_Cancel';
          Tag := 0;
          Hint := 'Cancel';
          Caption := '아니오';
          Color := clWhite;
          Transparent := False;
          font.Color := clBlack;

          Width := LabelList[0].Width - 1;
          OnClick := LabelClick_Pad;
        end;
      end;
  end;

end;

end.
