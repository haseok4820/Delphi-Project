unit uMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics, Winapi.TlHelp32,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, System.Win.ScktComp, System.Generics.Collections, Vcl.ExtCtrls, Vcl.Menus,
  ShellApi, JSON;

type

  TResult_Is = record
    iResult: Integer;
    sResult: String;
  end;

  TResult_Bs = record
    bResult: Boolean;
    sResult: String;
  end;

  // 메세지 유형 - [MSG]
  TSK_MSG = record
    sType: String; // 요청구분
    sIP: String; // 처리할장치IP
    iType: Integer; // 처리유형
    sAPP: String; // 처리앱명 (*재실행)
    iPOPUP: Integer; // 팝업표시유무(처리전 사용자 확인)
    iRecv: Integer; // 응답유무

  end;

  // 서버와 연결된 장치정보 - [INFO]
  TSK_Info = record
    bConn: Boolean; // 연결유무
    sHost: String; // 장치IP
    iPosNO: Integer; // 장치순번
    sPosID: String; // 장치별명
    sAPP: String; // 장치관리APP
  end;

  // Load/Save용 DID 설정 리스트
  TDID_Opations = record
    // AirDID.ini
    DIDViewType: Integer; // DID 유형
    iVoiceType: Integer; // 호출 유형 (0 : Bell, 1 : TTS)
    ReadyOrderUp: String; // 완료 타이틀명
    TableUP: String; // 준비중 타이틀명
    OrdClearTime: String; // 완료주문 표시시간(0은 무제한)
    ShowMenuList: Boolean; // 호출시 주문메뉴 표시
    DspSetView: Boolean; // 호출시 세트메뉴옵션도 함꼐 표시
    useTopMost: Boolean; // DID 맨 앞에 표시
    OrdNoneView: Boolean; // 준비중 주문 표시안함
    useAirCall: Boolean; // AirCall 사용유무(체크시 Delay 없음)
    DelData: Boolean; // 금일 매출 외 주문 삭제처리
    useViewCount: Boolean; // 대기건수 표시(유형 5번 전용)
    OrdCallFormTimeout: Integer; // 호출창 표시시간(0 무제한)
    ShowDualMonitor: Boolean;

    useKakaoMode: Boolean; // 카카오 모드
    arrMediaList: array [1 .. 5] of String; // 미디어 재생목록
    MediaMute: Boolean;

    // Servers.ini
    sHostIP: String;
    sAddress: String;
    sKitIP: array [1 .. 20] of String;

    // Airpos.ini
    GMZName: String; // 상호명
    useDualMonitor: Boolean; // 보조모니터 유무
    DspKITmonitor: Integer; // 주방현황판 표시 유무
    DspSetMenu: String; // 세트메뉴 구분값
    DspDisplayFileList: array [1 .. 5] of String; // 동영상 재생 목록
  end;

  TForm_SK = class(TForm)
    AirSocket_Server: TServerSocket;
    Panel_Header: TPanel;
    AirSocket_Client: TClientSocket;
    Timer_Refrush: TTimer;
    AirSK_TrayIcon: TTrayIcon;
    PopupMenu_Tray: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    Panel_Footer: TPanel;
    Button_ALL_Reboot: TButton;
    Button_ALL_Restart: TButton;
    Label_SKStatus: TLabel;
    Memo_Log: TMemo;
    Timer: TTimer;
    Timer_MsgQueue: TTimer;
    Timer_Cancel: TTimer;
    Button_Close: TButton;
    Button_Exit: TButton;

    // Form
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormDestroy(Sender: TObject);

    procedure Button_ALL_EventClick(Sender: TObject);
    procedure Button_CloseClick(Sender: TObject);

    procedure Memo_LogChange(Sender: TObject);

    procedure Timer_RefrushTimer(Sender: TObject);
    procedure TimerTimer(Sender: TObject);

    // Tray
    procedure AirSK_TrayIconClick(Sender: TObject);
    procedure N1Click(Sender: TObject);
    procedure N2Click(Sender: TObject);

    // Window Message
    procedure Send_Msg(MSG: String);
    procedure Recv_Msg(var MSG: TWMCopyData); message WM_COPYDATA;

    // Socket
    procedure AirSocket_ServerClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure AirSocket_ServerClientConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure AirSocket_ServerClientError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure AirSocket_ServerClientRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure AirSocket_ClientConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure AirSocket_ClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure AirSocket_ClientError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);

    // Event
    function NowDateTime: String;
    function JsonCut(sText: String): String;
    procedure GetParameter_WIN(MSG, sIP: String);
    function SetParameter_WIN(ReqType: String; iType: Integer; sIP: String): String;
    procedure ProgramStatus;
    procedure Timer_CancelTimer(Sender: TObject);
    procedure Label_SKStatusMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure Timer_MsgQueueTimer(Sender: TObject);
    procedure Button_ExitClick(Sender: TObject);
    procedure FileUpload(sHost, sFileName: String);
    procedure SaveFile(sHeader, sFileName: String);
    procedure FileSocketConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure FileSocketError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure FileSocketDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure FileSocketRead(Sender: TObject; Socket: TCustomWinSocket);

  private
    { Private declarations }
    procedure iniRead; overload;
    procedure iniRead(iType: Integer); overload;
    function WindowServiceStatus(sServiceName: String): Cardinal;
  public
    { Public declarations }
    procedure LogWrite(sText: String);
    procedure setBG(iType: Byte; ClassName: String);
    procedure SetStatus(iStatus: Integer; sStatus: String);

    function ShowPopup(iViewType: Integer; MSG: String; iTimeOut: Integer): Integer;
    function SKReboot: TResult_Is;
    function SKRestart(EXEName: String): TResult_Is;
  end;

const
  aGP = '|';
  aLF = #13#10;
  aPATH = 'C:\FOODCAFE\';

  STATUS_FAIL = 0;
  STATUS_OK = 1;

  POPUP_Ok = 0;
  POPUP_YesNO = 1;
  POPUP_OkCancle = 2;

  MSG_TYPE_REBOOT = 0;
  MSG_TYPE_RESTART = 1;
  MSG_TYPE_TALK = 2;

var
  Form_SK: TForm_SK;
  // Program Option
  iSKErr: Integer = 0; // 에러발생유무 (0 정상)
  sSKMsg: String = ''; // 메세지
  MsgInfo: TSK_MSG;
  MsgQueue: TQueue<String>;
  MsgIPQueue: TQueue<String>;
  usePopupMsg: Boolean = False; // 메세지 작업유무
  CloseChk: Boolean = False;

  iTotalSocket: Integer = 0;
  iConnSocket: Integer = 0;

  // ini Option
  bFWService: Boolean = False; // 방화벽 서비스 실행유무

  bSKServer: Boolean = False; // 소켓서버 유무
  sSKHost: String = ''; // 서버 주소
  iSKPort: Integer = 20228; // 통신 포트
  iFilePort: Integer = 20221; // 파일 전송용 포트
  iSKApp: Integer = 0; // 관리 프로그램
  iSKPosNo: Integer = 0; // 포스번호
  sSKName: String = ''; // 장치호칭

  arrClientSocket: array of TSK_Info; // 연결 클라이언트 리스트
  {
    iResult
    0 : 연결안됨
    1 : 연결됨

    sResult
    실행프로그램명
    FOODCAFE_X
    KIOSK
    DID
  }

  arrExeName: array [0 .. 5] of String = (
    'NONE',
    'FOODCAFE_X.exe',
    'KIOSK.exe',
    'AIR_DID.exe',
    'AIRServer.exe',
    'AirTrain.exe'
  );

implementation

{$R *.dfm}

uses inifiles, COMobj, OleCtrls, WinSvc,
  uBG, uPopup;

var
  DID_Opations: TDID_Opations;

  // 방화벽 규칙 추가
procedure AddException_Firewall(const RuleName, RulePath: String; PortNum: word);
const
  NET_FW_ACTION_ALLOW = 1;
  NET_FW_PROFILE2_PRIVATE = 2;
  NET_FW_PROFILE2_PUBLIC = 4;
  NET_FW_IP_PROTOCOL_TCP = 6;
  NET_FW_IP_PROTOCOL_UDP = 7;
  socket_port = 20228;
var
  Profile: Integer;
  Policy2: OleVariant;
  RObject: OleVariant;
  NewRule: OleVariant;
begin
  Profile := NET_FW_PROFILE2_PRIVATE OR NET_FW_PROFILE2_PUBLIC;
  Policy2 := CreateOleObject('HNetCfg.FwPolicy2');
  RObject := Policy2.Rules;
  NewRule := CreateOleObject('HNetCfg.FWRule');
  NewRule.Name := RuleName;
  NewRule.Description := '';
  NewRule.ApplicationName := RulePath;
  NewRule.Protocol := NET_FW_IP_PROTOCOL_TCP;
  NewRule.LocalPorts := IntToStr(PortNum);
  NewRule.Enabled := True;
  NewRule.Grouping := '';
  NewRule.Profiles := Profile;
  NewRule.Action := NET_FW_ACTION_ALLOW;

  RObject.Add(NewRule);
end;

// 방화벽 규칙 삭제
procedure RemoveException_Firewall(const RuleName: String);
const
  NET_FW_PROFILE2_PRIVATE = 2;
  NET_FW_PROFILE2_PUBLIC = 4;
var
  Policy2: OleVariant;
  RObject: OleVariant;
begin
  Policy2 := CreateOleObject('HNetCfg.FwPolicy2');
  RObject := Policy2.Rules;
  RObject.Remove(RuleName);
end;

procedure TForm_SK.AirSK_TrayIconClick(Sender: TObject);
begin
  Form_SK.Show;
  Top := 0;
  Left := 0;
end;

procedure TForm_SK.AirSocket_ClientConnect(Sender: TObject; Socket: TCustomWinSocket);
var
  json_obj: TJSONObject;
begin
  LogWrite('[CLIENT] Conn : 서버와 연결됨');
  SetStatus(STATUS_OK, '서버 연결정상');

  if Trim(sSKName) = '' then
    sSKName := 'Other';

  if iSKPosNo = 0 then
    iniRead;

  try

    json_obj := TJSONObject.Create;
    with json_obj do
    begin
      AddPair('MsgType', 'Set');
      AddPair('PosNo', IntToStr(iSKPosNo));
      AddPair('Connecting', '1');
      AddPair('PosIP', Socket.RemoteAddress);
      AddPair('PosName', sSKName);
      AddPair('PosAppName', arrExeName[iSKApp]);
    end;

    //
    LogWrite('서버와 연결됨 상태 전송 : ' + json_obj.ToString);
    AirSocket_Client.Socket.SendText(AnsiString(json_obj.ToString));
  finally
  end;

end;

procedure TForm_SK.AirSocket_ClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  LogWrite('[CLIENT] DisConn : 서버와 연결 종료됨.');
  SetStatus(STATUS_FAIL, '서버 연결실패');
end;

procedure TForm_SK.AirSocket_ClientError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);

begin
  LogWrite('[CLIENT] Error : 서버 연결오류 [' + IntToStr(ErrorCode) + ']');
  SetStatus(STATUS_FAIL, '서버 연결오류');
  ErrorCode := 0;

end;

procedure TForm_SK.AirSocket_ServerClientConnect(Sender: TObject; Socket: TCustomWinSocket);
var
  i, j: Integer;
begin
  LogWrite('[SERVER] Client Conn : ' + Socket.RemoteAddress);
  try
    if Length(arrClientSocket) <> 0 then
    begin
      for i := Low(arrClientSocket) to High(arrClientSocket) do
      begin
        if arrClientSocket[i].sHost = Socket.RemoteAddress then
        begin
          arrClientSocket[i].bConn := True;
          Break;
        end
        else if i = High(arrClientSocket) then
        begin
          SetLength(arrClientSocket, Length(arrClientSocket) + 1);
          j := High(arrClientSocket);
          with arrClientSocket[j] do
          begin
            bConn := True;
            sHost := Socket.RemoteAddress;
          end;
        end;
      end;
    end
    else
    begin
      SetLength(arrClientSocket, Length(arrClientSocket) + 1);
      with arrClientSocket[Low(arrClientSocket)] do
      begin
        bConn := True;
        sHost := Socket.RemoteAddress;
      end;
    end;
  except
    On E: Exception do
    begin
      LogWrite('소켓 정보 저장중 오류 : ' + E.Message);
    end;
  end;

end;

procedure TForm_SK.AirSocket_ServerClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
var
  i: Integer;
begin
  LogWrite('[SERVER] Client Disconn : ' + Socket.RemoteAddress);

  for i := Low(arrClientSocket) to High(arrClientSocket) do
  begin
    if arrClientSocket[i].sHost = Socket.RemoteAddress then
    begin
      arrClientSocket[i].bConn := False;
      Break;
    end;
  end;

end;

procedure TForm_SK.AirSocket_ServerClientError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
var
  i: Integer;
begin
  LogWrite('[SERVER] Client Error : ' + Socket.RemoteAddress + ', ErrCode' + IntToStr(ErrorCode));
  ErrorCode := 0;
  for i := Low(arrClientSocket) to High(arrClientSocket) do
  begin
    if arrClientSocket[i].sHost = Socket.RemoteAddress then
    begin
      arrClientSocket[i].bConn := False;
      Break;
    end;
  end;

end;

procedure TForm_SK.AirSocket_ServerClientRead(Sender: TObject; Socket: TCustomWinSocket);
var
  RecvMSG: String;
  sRecvHost: String;

  json_chk: TJSONObject;
  cancelChk: Boolean;

begin
  if CloseChk then
    Exit;

  // 소켓 메세지 수신
  RecvMSG := WideString(Socket.ReceiveText);
  sRecvHost := Socket.RemoteAddress;
  if usePopupMsg then
  begin
    Timer_MsgQueue.Enabled := False;
    Timer_Cancel.Enabled := True;

    LogWrite('popup 실행확인, 기존 메세지 취소처리 시작');
    Application.ProcessMessages;
    Sleep(500);

    if Form_BG <> nil then
    begin
      setBG(1, '');
    end;
    if Form_Popup <> nil then
    begin
      Timer_Cancel.Enabled := True;
    end;

    LogWrite('기존 메세지 취소완료');
    usePopupMsg := False;
    Timer_MsgQueue.Enabled := True;
  end;

  try
    Timer_MsgQueue.Enabled := False;
    json_chk := TJSONObject.ParseJSONValue(RecvMSG) as TJSONObject;

    with json_chk do
    begin
      if (JsonCut(GetValue('MsgType').ToString) = 'Req') AND (JsonCut(GetValue('ReqType').ToString) = '2') then
        cancelChk := True
      else
        cancelChk := False;
    end;

    if cancelChk = False then
    begin
      MsgQueue.Enqueue(RecvMSG);
      MsgIPQueue.Enqueue(sRecvHost);
    end
    else
    begin
      Repeat
        with MsgQueue do
        begin
          if Count <> 0 then
          begin
            Extract;
            TrimExcess;
          end;
        end;
        with MsgIPQueue do
        begin
          if Count <> 0 then
          begin
            Extract;
            TrimExcess;
          end;
        end;
      Until (MsgQueue.Count = 0) AND (MsgIPQueue.Count = 0);
    end;
  finally
    Timer_MsgQueue.Enabled := True;
  end;
end;

procedure TForm_SK.Button_ALL_EventClick(Sender: TObject);
var
  i: Integer;
  json_obj: TJSONObject;
begin
  if bSKServer = False then
  begin
    ShowPopup(POPUP_Ok, '관리자 단에서만 사용 가능합니다.', 30);
    Exit;
  end
  else if ShowPopup(POPUP_YesNO, (Sender as TButton).Hint, 60) <> mrYes then
  Begin
    Exit;
  End;

  if AirSocket_Server.Socket.ActiveConnections = 0 then
  begin
    ShowPopup(POPUP_Ok, '연결된 장치가 없습니다.', 30);
    Exit;
  end;

  LogWrite('연결된 장치수 : ' + IntToStr(AirSocket_Server.Socket.ActiveConnections));

  try
    json_obj := TJSONObject.Create;
    with json_obj do
    begin
      AddPair('MsgType', 'Req');
      AddPair('PosHost', 'ALL');
      AddPair('ReqType', TJSONNumber.Create((Sender as TButton).Tag));
      AddPair('ReqValue', 'ReBoot');
      AddPair('PopupYN', TJSONNumber.Create(1));
      AddPair('RecvYN', TJSONNumber.Create(0));
    end;

    for i := 0 to AirSocket_Server.Socket.ActiveConnections - 1 do
    begin
      AirSocket_Server.Socket.Connections[i].SendText(AnsiString(json_obj.ToString));
    end;
    LogWrite(' 모든 장치에 메세지 전송완료');
  except
    On E: Exception do
    begin
      LogWrite('메세지 전송 작업중 오류 : ' + E.Message);
    end;
  end;
end;

procedure TForm_SK.Button_CloseClick(Sender: TObject);
begin
  ShowWindow(Self.Handle, SW_MINIMIZE)
end;

procedure TForm_SK.Button_ExitClick(Sender: TObject);
begin
  CloseChk := True;
  Timer_Refrush.Enabled := False;
  Timer_MsgQueue.Enabled := False;
  Timer_Cancel.Enabled := False;

  if ShowPopup(POPUP_YesNO, '프로그램을 종료하시겠습니까?', 30) = mrYes then
  begin
    if bSKServer = False then
      AirSocket_Client.Active := False;

    MsgQueue.Free;
    MsgIPQueue.Free;
    Application.Terminate;
  end;

  CloseChk := False;
  Timer_Refrush.Enabled := True;
  Timer_MsgQueue.Enabled := True;
  Timer_Cancel.Enabled := True;
end;

procedure TForm_SK.FileSocketConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //
  LogWrite('파일 전송포트 연결됨');
end;

procedure TForm_SK.FileSocketDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin

  LogWrite('파일 전송포트 연결종료됨');
end;

procedure TForm_SK.FileSocketError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  LogWrite('파일 전송포트 오류 : ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;

procedure TForm_SK.FileSocketRead(Sender: TObject; Socket: TCustomWinSocket);
const
  MaxSize = 52428800;
var
  ms: TMemoryStream;
  ByteRec: LongInt;
  CopyBuffer: Pointer;
  ChunkSize, TempSize: Integer;
  FSize: Integer;
begin
  ms := TMemoryStream.Create;
  if FSize = 0 then
  begin
    if Socket.ReceiveLength > Sizeof(TempSize) then
    begin
      Socket.ReceiveBuf(TempSize, Sizeof(TempSize));
      ms.SetSize(TempSize);
      FSize := TempSize;

    end;
  end;

  if (FSize > 0) then
  begin
    GetMem(CopyBuffer, MaxSize);

    while Socket.ReceiveLength > 0 do
    begin
      ChunkSize := Socket.ReceiveLength;
      if ChunkSize > MaxSize then
        ChunkSize := MaxSize;
      ByteRec := Socket.ReceiveBuf(CopyBuffer^, ChunkSize);
      ms.Write(CopyBuffer^, ByteRec);
      dEC(FSize, ByteRec);
    end;

    if FSize = 0 then
    BEGIN
      if DirectoryExists('C:\FOODCAFE\K_DOWNLOAD') = False then
        CreateDirectory(PWideChar('C:\FOODCAFE\K_DOWNLOAD'), nil);

      ms.SaveToFile('C:\FOODCAFE\K_DOWNLOAD\' + FormatDateTime('YYYMMDDHHMMSS', Now) + '.jpg');
    END;
  end;

end;

procedure TForm_SK.FileUpload(sHost, sFileName: String);
begin
  //

  if bSKServer then
  begin
  end;
end;

procedure TForm_SK.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  CanClose := False;
  Top := Screen.Monitors[0].Top - Height - 50;
  Left := 0;
  Form_SK.Hide;
end;

procedure TForm_SK.FormDestroy(Sender: TObject);
begin
  LogWrite('통신 프로그램 종료 - 윈도우 서비스 제거시작');
  if bFWService then
  begin
    RemoveException_Firewall('AirSK_PORT');
  end;
  LogWrite('윈도우 서비스 제거완료');
end;

procedure TForm_SK.FormShow(Sender: TObject);
begin
  iniRead;
  Left := 0;
  ShowWindow(Self.Handle, SW_MINIMIZE);
  // 서버용
  if bSKServer = False then
  begin
    Button_ALL_Reboot.Visible := False;
    Button_ALL_Restart.Visible := False;
  end;

  Timer_Refrush.Enabled := True;
end;

procedure TForm_SK.GetParameter_WIN(MSG, sIP: String);
var
  i, j: Byte;
  RecvIP: String;

  json_obj: TJSONObject;
  json_obj_Send, json_obj_Options: TJSONObject;
begin
  json_obj := TJSONObject.ParseJSONValue(MSG) as TJSONObject;
  i := 0;
  with json_obj do
  begin
    MsgInfo.sType := JsonCut(GetValue('MsgType').ToString);
    LogWrite('처리 메세지 [' + MsgInfo.sType + ']: ' + MSG);

    { 전달 }
    if MsgInfo.sType = 'Get' then
    begin
      if bSKServer then
      begin
        for i := Low(arrClientSocket) to High(arrClientSocket) do
        begin
          arrClientSocket[i].bConn := False;
        end;

        with AirSocket_Server.Socket do
        begin
          for i := 0 to ActiveConnections - 1 do
            for j := Low(arrClientSocket) to High(arrClientSocket) do
              if arrClientSocket[j].sHost = Connections[i].RemoteAddress then
              begin
                arrClientSocket[j].bConn := True;
                Break;
              end;
        end;
        ProgramStatus;
      end
      else
      begin
        try
          Timer_Refrush.Enabled := True;
        finally
          json_obj.Free;
        end;
        Exit;
      end;
    end
    { 수정 }
    else if MsgInfo.sType = 'Set' then
    begin
      if bSKServer then
      begin
        try
          if Length(arrClientSocket) > 0 then
          begin
            for i := Low(arrClientSocket) to High(arrClientSocket) do
            begin
              if arrClientSocket[i].sHost = sIP then
              begin
                Break;
              end;
            end;
          end
          else
          begin
            SetLength(arrClientSocket, 1);
            i := Low(arrClientSocket);
          end;
        except
          On E: Exception do
          begin
            LogWrite('통신정보 확인중 오류 : ' + E.Message);
          end;
        end;

        try
          with arrClientSocket[i] do
          begin
            iPosNO := StrToIntDef(JsonCut(GetValue('PosNo').ToString), 0);
            bConn := True;
            sHost := sIP;
            sPosID := JsonCut(GetValue('PosName').ToString);
            sAPP := JsonCut(GetValue('PosAppName').ToString);
          end;

          ProgramStatus;
        except
          On E: Exception do
          begin
            LogWrite('변경사항 저장중 오류 : ' + E.Message);
          end;
        end;
      end;
    end
    // 적용하기
    else if (MsgInfo.sType = 'Save') then
    begin

    end
    // 가져오기
    else if (MsgInfo.sType = 'Load') then
    begin
      if bSKServer then
      begin
        RecvIP := JsonCut(GetValue('PosHost').ToString);
        for i := Low(arrClientSocket) to High(arrClientSocket) do
        begin
          if AirSocket_Server.Socket.Connections[i].RemoteAddress = RecvIP then
          begin
            AirSocket_Server.Socket.Connections[i].SendText(AnsiString(MSG));
            LogWrite('확인완료 메세지 전달 완료');
            Break;
          end;
        end;
      end
      else
      begin
        try

          MsgInfo.iType := StrToIntDef(GetValue('ReqType').ToString, -1);
          iniRead(MsgInfo.iType);

          json_obj_Send := TJSONObject.Create;
          json_obj_Options := TJSONObject.Create;
          with json_obj_Send do
          begin
            AddPair('MsgType', 'Save');
            AddPair('PosHost', RecvIP);
            AddPair('ReqType', TJSONNumber.Create(MsgInfo.iType));

            json_obj_Options := TJSONObject.ParseJSONValue(SetParameter_WIN(MsgInfo.sType, MsgInfo.iType, RecvIP)) as TJSONObject;
            AddPair('Options', json_obj_Options);
          end;

          Send_Msg(json_obj_Send.ToString);
          json_obj_Send.Free;
        except
          On E: Exception do
          begin
            LogWrite('설정 응답 전송처리중 오류 : ' + E.Message);
          end;
        end;

      end;

    end
    { 요청 }
    else if MsgInfo.sType = 'Req' then
    begin
      // 서버일경우, 전달처리
      if bSKServer then
      begin
        RecvIP := JsonCut(GetValue('PosHost').ToString);
        with AirSocket_Server.Socket do
        begin
          for i := 0 to ActiveConnections - 1 do
          begin
            if Connections[i].RemoteAddress = RecvIP then
            begin
              Connections[i].SendText(AnsiString(MSG));
              LogWrite('확인완료 메세지 전달 완료');
              Break;
            end;
          end;
        end;
      end
      // 작업 실행
      else
      begin
        with MsgInfo do
        begin
          iType := StrToIntDef(GetValue('ReqType').ToString, -1);
          sAPP := JsonCut(GetValue('ReqValue').ToString);
          iPOPUP := StrToIntDef(GetValue('PopupYN').ToString, 1);
          iRecv := StrToIntDef(GetValue('RecvYN').ToString, 0);

          case iType of
            MSG_TYPE_REBOOT:
              SKReboot;
            MSG_TYPE_RESTART:
              SKRestart(sAPP);
          else
            LogWrite('기타/알수없는 요청 ');
          end;
        end;
      end;
    end;
    begin

    end;
  end;

  json_obj.Free;
end;

procedure TForm_SK.iniRead(iType: Integer);
const
  AIRPOS = 1;
  AIRKIOSK = 2;
  AIRDID = 3;
var
  ini: TiniFile;
  i: Integer;
begin
  //
  case iType of
    AIRDID:
      begin
        ini := TiniFile.Create('C:\FOODCAfe\AirDID.ini');
        with DID_Opations, ini do
        begin
          DIDViewType := ReadInteger('MNG', 'DIDViewType', 0);
          iVoiceType := ReadInteger('MNG', 'iVoiceType', 2);
          ReadyOrderUp := ReadString('MNG', 'ReadyOrderUp', '음식을 가져가주세요.');
          TableUP := ReadString('MNG', 'TableUP', '준비중');
          OrdClearTime := ReadString('MNG', 'OrdClearTime', '5');
          ShowMenuList := ReadBool('MNG', 'ShowMenuList', False);
          DspSetView := ReadBool('MNG', 'DspSetView', False);
          useTopMost := ReadBool('MNG', 'useTopMost', False);
          OrdNoneView := ReadBool('MNG', 'OrdNoneView', False);
          useAirCall := ReadBool('MNG', 'useAirCall', False);
          DelData := ReadBool('MNG', 'DelData', False);
          useViewCount := ReadBool('MNG', 'useViewCount', False);
          OrdCallFormTimeout := ReadInteger('MNG', 'OrdCallFormTimeout', 60);
          ShowDualMonitor := ReadBool('MNG', 'ShowDualMonitor', False);
        end;
        ini.Free;

        ini := TiniFile.Create('C:\FOODCAfe\Servers.ini');
        with DID_Opations, ini do
        begin
          sAddress := ReadString('POS', 'Address', '127.0.0.1');
          sHostIP := sAddress;
        end;
        ini.Free;

        ini := TiniFile.Create('C:\FOODCAfe\Airpos.ini');
        with DID_Opations, ini do
        begin
          GMZName := ReadString('AIRPOS', 'GMZName', '');
          useDualMonitor := ReadBool('AIRPOS', 'useDualMonitor', False);
          DspKITmonitor := ReadInteger('AIRPOS', 'DspKITmonitor', 0);
          DspSetMenu := ReadString('AIRPOS', 'DspSetMenu', '');

          for i := 1 to 5 do
          begin
            DspDisplayFileList[i] := ReadString('airpos', 'DualDisplayFile' + IntToStr(i), '');
          end;
        end;
        ini.Free;

      end;

  end;
end;

function TForm_SK.NowDateTime: String;
begin
  Result := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
end;

procedure TForm_SK.ProgramStatus;
var
  i, j, k: Integer;

  json_obj, json_list: TJSONObject;
  json_arr: TJsonArray;

  MSG_JSON: String;
begin
  if bSKServer = False then
    Exit;

  LogWrite('전송전 연결장치 상태체크중..');
  if Length(arrClientSocket) <= 0 then
  begin
    LogWrite('장치정보가 없습니다.');
    // ShowPopup(POPUP_Ok, '연결된 장치가 없습니다.', 30);
    Exit;
  end
  else
  begin
    j := 0;
    for i := Low(arrClientSocket) to High(arrClientSocket) do
    begin
      if arrClientSocket[i].bConn then
        inc(j);
    end;
  end;

  LogWrite('전송전 연결장치 상태체크완료. [연결된 장치수 : ' + IntToStr(j) + ']');

  try
    json_obj := TJSONObject.Create;

    try
      with json_obj do
      begin
        AddPair('MsgType', 'Set');
        AddPair('ConnCnt', TJSONNumber.Create(j));
        AddPair('TotalCnt', TJSONNumber.Create(Length(arrClientSocket)));
        AddPair('LastUpdate', FormatDateTime('YYYY-MM-DD HH:MM:SS', Now));

        LogWrite('메세지 헤더 처리완료');

        json_arr := TJsonArray.Create;
        with json_arr do
        begin
          for k := Low(arrClientSocket) to High(arrClientSocket) do
          begin
            json_list := TJSONObject.Create;
            with json_list, arrClientSocket[k] do
            begin
              AddPair('PosNo', TJSONNumber.Create(iPosNO));
              if bConn then
                AddPair('Connecting', TJSONNumber.Create(1))
              else
                AddPair('Connecting', TJSONNumber.Create(0));
              AddPair('PosIP', sHost);
              AddPair('PosName', sPosID);
              AddPair('PosAppName', sAPP);

              LogWrite(IntToStr(k + 1) + '번째 소켓정보 처리완료');
            end;

            AddElement(json_list);
            LogWrite('소켓리스트 처리완료');
          end;
        end;
        AddPair('PosList', json_arr);
        LogWrite('소켓정보 처리완료 = ');
      end;

      MSG_JSON := json_obj.ToString;
      LogWrite('전송할 정보 : ' + MSG_JSON);
      Send_Msg(MSG_JSON);
    except
      On E: Exception do
      begin
        LogWrite('메세지 전송 및 작업중 오류 : ' + E.Message);

      end;
    end;
  finally
  end;
end;

procedure TForm_SK.FormCreate(Sender: TObject);
var
  i: Cardinal;
begin
  MsgQueue := TQueue<String>.Create;
  MsgIPQueue := TQueue<String>.Create;
  Timer_MsgQueue.Enabled := True;
  LogWrite('통신 프로그램 실행 - 윈도우 서비스 체크시작');
  i := WindowServiceStatus('MpsSvc');
  bFWService := i in [SERVICE_RUNNING, SERVICE_START_PENDING];
  if bFWService then
  begin
    AddException_Firewall('AirSK_FILEPORT', Application.EXEName, 20221);
    AddException_Firewall('AirSK_PORT', Application.EXEName, 20228);
  end;
  LogWrite('윈도우 서비스 체크완료');
end;

procedure TForm_SK.iniRead;
var
  ini: TiniFile;
  siniPath: String;
begin
  //
  siniPath := ExtractFilePath(Application.EXEName) + 'AirControl.ini';
  if (FileExists(siniPath) = False) or (FileExists('C:\foodcafe\Airpos.ini') = False) then
  begin
    ShowPopup(0, '설정 파일이 없습니다.' + aLF + '푸드카페 및 간편관리자에서 설정' + aLF + '후 사용 가능합니다.', 30);
    Exit;
  end;

  ini := TiniFile.Create('.\AirControl.ini');
  try
    with ini do
    begin
      bSKServer := ReadBool('CONTROL', 'ServerYN', bSKServer);

      if NOT bSKServer then
      begin
        sSKHost := ReadString('CONTROL', 'HostIP', sSKHost);
        iSKPort := ReadInteger('CONTROL', 'Port', iSKPort);

        iSKApp := ReadInteger('CONTROL', 'EXETYpe', 0);
        case iSKApp of
          0:
            begin
              sSKName := '사용안함';
            end;
          1:
            begin
              sSKName := '포스';
            end;
          2:
            begin
              sSKName := '키오스크';
            end;
          3:
            begin
              sSKName := 'DID';
            end;
          4:
            begin
              sSKName := '주방통신';
            end;
          5:
            begin
              sSKName := 'ASP매출통신';
            end;
        else
          begin
            sSKName := '기타/알수없음';
          end;
        end;
      end;

    end;
  finally
    ini.Free;
  end;

  ini := TiniFile.Create('C:\FOODCAFE\AIRPOS.ini');
  try
    with ini do
    begin
      iSKPosNo := ReadInteger('AIRPOS', 'PosNo', iSKPosNo);
    end;
  finally
    ini.Free;
  end;
end;

function TForm_SK.JsonCut(sText: String): String;
begin
  //
  Result := StringReplace(sText, '"', '', [rfReplaceAll]);
end;

procedure TForm_SK.Label_SKStatusMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  ReleaseCapture;
  SendMessage(Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
end;

procedure TForm_SK.LogWrite(sText: String);
var
  F: TextFile;
  ErrorMSG: String;
  sLogPath: String;
begin
  try
    sLogPath := ExtractFilePath(Application.EXEName);
    Memo_Log.Lines.Add(sText);
    sLogPath := ExtractFilePath(Application.EXEName) + 'log';
    if NOT CreateDirectory(sLogPath) then
      Exit;

    sLogPath := sLogPath + '\AirSK_Log' + FormatDateTime('YYYYMMDD', Now) + '.txt';
    inputBox('','', sLogPath);
    assignFile(F, sLogPath);
    if NOT FileExists(sLogPath) then
      Rewrite(F)
    else
      Append(F);
    WriteLN(F, NowDateTime + ' : ' + sText);
    CloseFIle(F);
  except
    ON E: Exception do
    begin
      Memo_Log.Lines.Add('로그 기록중 오류 : ' + E.Message);
      ErrorMSG := E.Message;
    end;
  end;
end;

procedure TForm_SK.Memo_LogChange(Sender: TObject);
begin
  if Memo_Log.Lines.Count > 100 then
    Memo_Log.Clear;

end;

procedure TForm_SK.N1Click(Sender: TObject);
begin
  Left := 0;
  Top := 0;
end;

procedure TForm_SK.N2Click(Sender: TObject);
begin
  Application.Terminate;

end;

procedure TForm_SK.Recv_Msg(var MSG: TWMCopyData);
const
  sLF = #10;
var
  RecvText, RecvText_Backup: String;
begin
  // Msg Sample
  try
    RecvText := PChar(MSG.CopyDataStruct.lpData);
    RecvText_Backup := RecvText;

    MsgQueue.Enqueue(RecvText);
    MsgIPQueue.Enqueue('127.0.0.1');
  except
    On E: Exception do
    begin
      LogWrite('응답 메세지 구분처리중 오류 : ' + E.Message);
    end;
  end;
end;

procedure TForm_SK.SaveFile(sHeader, sFileName: String);
begin
  //
end;

procedure TForm_SK.Send_Msg(MSG: String);
var
  DataStruct: CopyDataStruct;
  ExeHandle: THandle;
  RecvText: String;

begin
  // 데이터 전송
  LogWrite('보낼 메세지 : ' + MSG);

  try
    ExeHandle := FindWindow(PChar('TForm_AirManager'), PChar('푸드카페 사용자 설정화면'));
    if ExeHandle <> 0 then
    begin
      try
        RecvText := '';
        with DataStruct do
        begin
          dwData := 0;
          cbData := (Length(AnsiString(MSG)) * Sizeof(char)) + 1;
          lpData := PChar(MSG);
          SetForegroundWindow(ExeHandle);
          SendMessage(ExeHandle, WM_COPYDATA, Form_SK.Handle, Integer(@DataStruct));
        end;
      except
        ON E: Exception do
        begin
          LogWrite('메세지송신오류 : ' + E.Message);
          LogWrite('값(메세지) : ' + IntToStr(ExeHandle) + '(' + MSG + ')');
        end;
      end;
    end
    else
    begin
      LogWrite('수신 프로그램 없음.');
    end;
  except
    ON E: Exception do
    begin
      LogWrite('메세지 전송 중 오류 : ' + E.Message + #13#10 + MSG);
    end;

  end;
end;

procedure TForm_SK.setBG(iType: Byte; ClassName: String);
begin
  try
    case iType of
      0:
        begin
          if Form_BG <> nil then
            FreeAndNil(Form_BG);

          Form_BG := TForm_BG.Create(Self);
          Form_BG.Hint := ClassName;
          Form_BG.Show;
        end;
      1:
        begin
          if Assigned(Form_BG) then
            FreeAndNil(Form_BG);
        end;
    end;
  except
    ON E: Exception do
    begin
      LogWrite('팝업배경 처리중 오류 :' + E.Message);
    end;

  end;
end;

function TForm_SK.SetParameter_WIN(ReqType: String; iType: Integer; sIP: String): String;
var
  json_obj: TJSONObject;
  i: Byte;
begin
  //
  json_obj := TJSONObject.Create;
  if ReqType = 'Load' then
  begin
    case iType of
      3:
        begin
          try
            with DID_Opations, json_obj do
            begin
              AddPair('DIDViewType', TJSONNumber.Create(DIDViewType));
              AddPair('iVoiceType', TJSONNumber.Create(iVoiceType));
              AddPair('ReadyOrderUp', ReadyOrderUp);
              AddPair('TableUP', TableUP);
              AddPair('OrdClearTime', OrdClearTime);
              AddPair('ShowMenuList', TJSONBool.Create(ShowMenuList));
              AddPair('DspSetView', TJSONBool.Create(DspSetView));
              AddPair('useTopMost', TJSONBool.Create(useTopMost));
              // AddPair('OrdNoneView', TJSONBool.Create(OrdNoneViedelphiw));
              AddPair('useAirCall', TJSONBool.Create(useAirCall));
              AddPair('DelData', TJSONBool.Create(DelData));
              AddPair('useViewCount', TJSONBool.Create(useViewCount));
              AddPair('OrdCallFormTimeout', TJSONNumber.Create(OrdCallFormTimeout));
              AddPair('ShowDualMonitor', TJSONBool.Create(ShowDualMonitor));

              AddPair('sAddress', sAddress);
              AddPair('sHostIP', sHostIP);

              AddPair('GMZName', GMZName);
              AddPair('useDualMonitor', TJSONBool.Create(useDualMonitor));
              AddPair('DspKITmonitor', TJSONNumber.Create(DspKITmonitor));
              AddPair('DspSetMenu', DspSetMenu);

              for i := 1 to 5 do
              begin
                AddPair('DualDisplayFile' + IntToStr(i), DspDisplayFileList[i]);
              end;
            end;

            Result := json_obj.ToString;
          except
            On E: Exception do
            begin
              LogWrite('[SetParameter_WIN] Json 작업 중 오류 : ' + E.Message);
            end;
          end;
        end;
    end;
  end
  else if ReqType = 'Save' then
  begin

  end;
end;

procedure TForm_SK.SetStatus(iStatus: Integer; sStatus: String);
begin
  //
{$IFDEF DEBUG}
  LogWrite('상태메세지 : ' + sStatus);
{$ENDIF}
  case iStatus of
    STATUS_OK:
      begin
        Timer_Refrush.Enabled := False;
        Timer_Refrush.Tag := 0;

        with Label_SKStatus do
        begin
          Caption := sStatus;
          Font.Color := clGreen;
        end;
      end;
    STATUS_FAIL:
      begin
        Timer_Refrush.Interval := 5000;
        Timer_Refrush.Enabled := True;

        with Label_SKStatus do
        begin
          Caption := sStatus;
          Font.Color := clRed;
        end;
      end;
  end;
end;

function TForm_SK.ShowPopup(iViewType: Integer; MSG: String; iTimeOut: Integer): Integer;
begin
  usePopupMsg := True;
  if Form_Popup <> nil then
  begin
    Form_Popup.Free;
    Application.ProcessMessages;
    Sleep(500);
  end;

  Form_Popup := TForm_Popup.Create(Self);
  try
    try
      with Form_Popup do
      begin
        setBG(0, 'TForm_Popup');
        Tag := iViewType;
        Label_MSG.Caption := MSG;
        Timer_Timeout.Tag := iTimeOut;

        ShowModal;

        LogWrite('팝업 응답 : ' + IntToStr(ModalResult));
        Result := ModalResult;
        setBG(1, 'TForm_Popup');
      end;

      FreeAndNil(Form_Popup);
    except
      ON E: Exception do
      begin
        LogWrite('팝업 처리중 오류 : ' + E.Message);
        Result := 0;
      end;
    end;

  finally
    Timer_Cancel.Enabled := False;
    usePopupMsg := False;
  end;
end;

function TForm_SK.SKReboot: TResult_Is;
var
  Result_IS: TResult_Is;
begin
  // 윈도우 재부팅
  try
    if (MsgInfo.iPOPUP = 0) OR (ShowPopup(POPUP_Ok, '윈도우를 재부팅하려고 합니다.' + aLF + '사용중이신 경우,' + aLF + '아래 "확인"버튼을 눌러' + aLF + '재부팅을 취소해주세요.',
      30) = mrCancel) then
    begin
      ShellExecute(0, 'open', 'shutdown.exe', '-r -f -t 0', nil, SW_HIDE);
    end
    else
    begin
      Result_IS.iResult := 0;
      Result_IS.sResult := '사용자 취소';
      Exit;
    end;

    if MsgInfo.iRecv <> 0 then
    begin
      Result := Result_IS;
    end;

    Result_IS.iResult := 1;
    Result_IS.sResult := '재부팅 요청완료';
  except
    On E: Exception do
    begin
      Result_IS.sResult := '재부팅 처리오류 : ' + E.Message;
      Result_IS.iResult := 0;

      ShellExecute(0, 'open', 'shutdown.exe', '-a', nil, SW_HIDE);
      LogWrite(Result.sResult + aLF + '재부팅 요청 취소진행');
    end;
  end;
end;

function TForm_SK.SKRestart(EXEName: String): TResult_Is;
var
  Process32: TProcessEntry32;
  ExeHandle, KeyHandle: THandle;
  Next: Boolean;
  i: Integer;
  bFOODCAFE: Boolean;
begin
  Result.iResult := 0;
  Result.sResult := '';

  Process32.dwSize := Sizeof(TProcessEntry32);
  ExeHandle := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
  KeyHandle := 0;

  if Process32First(ExeHandle, Process32) then
  begin
    repeat
      // 다음 프로세스가 존재한다면
      Next := Process32Next(ExeHandle, Process32);

      // 같은 프로세스가 있으면 반폭 종료
      if AnsiCompareText(Process32.szExeFile, Trim(EXEName)) = 0 then
      begin
        KeyHandle := Process32.th32ProcessID;
        Break;
      end;

    until NOT Next;
  end;

  // 프로그램 재실행
  try
    if KeyHandle <> 0 then
    begin
      LogWrite('재실행 - ' + EXEName);
      if (MsgInfo.iPOPUP <> 0) AND (ShowPopup(POPUP_Ok, '프로그램을 재실행하려고 합니다.' + aLF + '사용중이신 경우,' + aLF + '아래 "확인"버튼을 눌러' + aLF +
        '재실행을 취소해주세요.', 30) <> mrCancel) then
      begin
        LogWrite(EXEName + ' 사용중. 재실행 취소');
        Result.iResult := 0;
        Result.sResult := '';
        Exit;
      end;

      if (MsgInfo.iPOPUP = 0) then
        Result.iResult := 1;

      ExeHandle := OpenProcess(PROCESS_TERMINATE, True, Process32.th32ProcessID);
      if ExeHandle <> 0 then
      begin
        if not TerminateProcess(ExeHandle, 0) then
        begin
          LogWrite('종료 실패');
          Result.iResult := 0;
          Result.sResult := '종료 실패';
        end
        else
        begin
          LogWrite('종료 성공');
          Result.iResult := 1;
          Result.sResult := '';
        end;
      end
      else
      begin
        LogWrite('처리 실패');
        Result.iResult := 0;
        Result.sResult := '처리 실패';
      end;
    end
    else
    begin
      LogWrite('미실행상태');
      Result.iResult := 1;
      Result.sResult := '';
    end;
  except
    ON E: Exception do
    begin
      Result.sResult := '프로그램 종료 처리중 오류 : ' + E.Message;
      Result.iResult := 0;
      LogWrite(Result.sResult);
    end;
  end;

  if (Result.iResult <> 0) OR (KeyHandle = 0) then
  begin
    bFOODCAFE := False;
    for i := Low(arrExeName) to High(arrExeName) do
    begin
      if arrExeName[i] = EXEName then
      begin
        LogWrite('FOODCAFE 경로로 시작');
        bFOODCAFE := True;
        Break;
      end;
    end;

    if bFOODCAFE then
    begin
      if FileExists(aPATH + EXEName) then
        ShellExecute(Application.Handle, 'open', PChar(aPATH + EXEName), nil, nil, SW_NORMAL)
      else
        LogWrite(aPATH + EXEName + ' 파일을 찾을수 없음');
    end
    else
    begin
      if FileExists('.\' + EXEName) then
        ShellExecute(Application.Handle, 'open', PChar('.\' + EXEName), nil, nil, SW_NORMAL)
      else
        LogWrite('.\' + EXEName + ' 파일을 찾을수 없음');
    end;
  end;
end;

procedure TForm_SK.TimerTimer(Sender: TObject);
begin
  Timer.Enabled := False;
end;

procedure TForm_SK.Timer_CancelTimer(Sender: TObject);
begin
  if CloseChk then
    Exit;
  Timer_Cancel.Enabled := False;
  Timer_Cancel.Tag := 0;
  if usePopupMsg then
  begin
    Form_Popup.ModalResult := mrNo;
  end;
  Timer_Cancel.Tag := 1;
end;

procedure TForm_SK.Timer_MsgQueueTimer(Sender: TObject);
begin
  if CloseChk then
    Exit;
  TRY
    Timer_MsgQueue.Enabled := False;
    try
      if (MsgQueue.Count <> 0) AND (usePopupMsg = False) AND (Form_Popup = nil) then
      begin
        GetParameter_WIN(MsgQueue.Peek, MsgIPQueue.Peek);
        if MsgQueue.Count <> 0 then
        begin
          with MsgQueue do
          begin
            Extract;
            TrimExcess;
          end;

          with MsgIPQueue do
          begin
            Extract;
            TrimExcess;
          end;
        end;
      end;
    except
      ON E: Exception do
      begin
        LogWrite('메세지 큐 작업중 오류 : ' + E.Message);
      end;
    end;
  FINALLY
    Timer_MsgQueue.Enabled := True;
  END;
end;

procedure TForm_SK.Timer_RefrushTimer(Sender: TObject);
begin
  if CloseChk then
    Exit;
  Timer_Refrush.Tag := Timer_Refrush.Tag + 1;

  LogWrite('연결 체크중..' + IntToStr(Timer_Refrush.Tag));
  Timer_Refrush.Enabled := False;

  try
    iniRead;
    // 서버용
    if bSKServer then
    begin
      SetStatus(STATUS_FAIL, '서버 재실행중..');
      with AirSocket_Server do
      begin
        if Active then
          Active := False;

        Port := iSKPort;
        Active := True;
        Timer_Refrush.Tag := 0;

        Button_ALL_Reboot.Visible := True;
        Button_ALL_Restart.Visible := True;

        Application.ProcessMessages;
        Sleep(500);

        Active := True;
        SetStatus(STATUS_OK, '서버 실행 완료');

      end;
    end
    // 클라이언트용
    else
    begin
      LogWrite('클라이언트 연결요청');
      with AirSocket_Client do
      begin
        if Active then
          Active := False;

        Address := sSKHost;
        Port := iSKPort;

        Active := True;
        Timer.Enabled := True;
        repeat
          Application.ProcessMessages;
        until Timer.Enabled = False;

        if Socket.Connected then
          SetStatus(STATUS_OK, '연결정상')
        else
          SetStatus(STATUS_FAIL, '연결실패 재시도 처리중..');
      end;
    end;
  except
    on E: Exception do
    begin
      SetStatus(STATUS_FAIL, '연결확인중 오류');
      LogWrite('통신체크중 오류 : ' + E.Message);
      Timer_Refrush.Enabled := True;
    end;
  end;
end;

function TForm_SK.WindowServiceStatus(sServiceName: String): Cardinal;
var
  schm, schs: SC_HANDLE;
  ss: TServiceStatus;

  sMachine: String;
  str: String;
begin

  sMachine := '';
  schm := OpenSCManager(PWideChar(sMachine), nil, SC_MANAGER_CONNECT);

  if schm <> 0 then
  begin
    schs := OpenService(schm, PWideChar(sServiceName), SERVICE_QUERY_STATUS);
    if schs <> 0 then
    begin
      if QueryServiceStatus(schs, ss) then
      begin
        case ss.dwCurrentState of
          SERVICE_CONTINUE_PENDING:
            begin
              str := '서비스 실행 보류중';
            end;
          SERVICE_PAUSE_PENDING:
            begin
              str := '서비스 일시 중지 보류중';
            end;
          SERVICE_PAUSED:
            begin
              str := '서비스 증지됨';
            end;
          SERVICE_RUNNING:
            begin
              str := '서비스 실행됨';
            end;
          SERVICE_START_PENDING:
            begin
              str := '서비스 시작중';
            end;
          SERVICE_STOP_PENDING:
            begin
              str := '서비스 중지중';
            end;
          SERVICE_STOPPED:
            begin
              str := '서비스 실행안된 상태';
            end;
        end;
      end;
      Result := ss.dwCurrentState;
    end
    else
    begin
      RaiseLastOSError;
      str := '오류(Error)2';
      Result := 0;
    end;

    CloseServiceHandle(schs);
  end
  else
  begin
    RaiseLastOSError;
    str := '오류(Error)1';
    Result := 0;
  end;
  CloseServiceHandle(schm);
end;

end.
