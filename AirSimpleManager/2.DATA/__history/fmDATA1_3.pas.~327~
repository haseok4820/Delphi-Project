unit fmDATA1_3;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.WinXCtrls, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.ExtCtrls, Frame_Edit;

type
  TForm_DATA1_3 = class(TForm)
    Label_Title: TLabel;
    Panel_SetList: TPanel;
    Label2: TLabel;
    ListBox_SetList: TListBox;
    Panel_SetList_Groupinfo: TPanel;
    Label3: TLabel;
    Panel2: TPanel;
    Frame_ENV_Guide: TFrame_ENV_Edit;
    Frame_ENV_Min: TFrame_ENV_Edit;
    Frame_ENV_Max: TFrame_ENV_Edit;
    RadioGroup1: TRadioGroup;
    ListView_SetMenuList: TListView;
    Panel_SetList_Group: TPanel;
    Label1: TLabel;
    Button_SetGroupDelete: TButton;
    Button_SetGroupAdd: TButton;
    ScrollBox_SetGroupList: TScrollBox;
    Timer_Resize: TTimer;
    ToggleSwitch_Update: TToggleSwitch;
    Button_SetUpdate: TButton;
    Button_SetAdd: TButton;
    CheckBox_Simple: TCheckBox;
    procedure FormShow(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);

    procedure Timer_ResizeTimer(Sender: TObject);

    procedure ListBox_SetListClick(Sender: TObject);
    procedure Button_SetGroupAddClick(Sender: TObject);
    procedure Button_SetGroupDeleteClick(Sender: TObject);

    procedure ScrollBox_MouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
    procedure Button_SetClick(Sender: TObject);
    procedure ToggleSwitch_UpdateClick(Sender: TObject);
    procedure CheckBox_SimpleClick(Sender: TObject);
  private
    procedure ShowSetList; // 세트 목록 표시
    procedure ShowSetGroupList(iSeq: Cardinal); // 세트 연결그룹 리스트 표시
    procedure FrameSetGroupClick(Sender: TObject); // 세트 연결그룹 클릭 (내부 구성 표시)

  public
    { Public declarations }
  protected
    procedure FormResizeEND(var Message: TMessage); message WM_EXITSIZEMOVE;
  end;

const
  LISTVIEW_UNSELECT = -1;

var
  Form_DATA1_3: TForm_DATA1_3;
  iSelect_SetGroupSeq: Integer = 0;

implementation

{$R *.dfm}

uses uDM, Frame_Nav, fmSet, uMain;

procedure TForm_DATA1_3.FormShow(Sender: TObject);
begin
  Timer_Resize.Enabled := True;
  DM.GetSets;
  DM.GetSetMenus;
  ShowSetList;
end;

procedure TForm_DATA1_3.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin

  case Key of
    113: // F2
      Button_SetClick(Button_SetAdd);
    114: // F3
      Button_SetClick(Button_SetUpdate);
    115: // F4
      Button_SetGroupAddClick(Button_SetGroupAdd);
    46: // F5
      Button_SetGroupDeleteClick(Button_SetGroupDelete);

  end;
end;

procedure TForm_DATA1_3.FormClose(Sender: TObject; var Action: TCloseAction);
var
  i, j: Integer;
  sDateTime: String;
begin
  //
  if Not DM.DBConnect then
    exit
  else
  begin
    try
      if Length(arrStockSet) = 1 then
        exit;

      sDateTime := FormatDateTime('YYYYMMDDHHMMSS', NOW);
      DM.DBSQLClear;
      with DM.FDQ do
      begin

        SQL.Text := 'UPDATE HSET SET ';
        for i := 1 to 10 do
          SQL.Add(' ISEQ' + IntToStr(i) + ' = :ISEQ' + IntToStr(i) + ', ');
        SQL.Add(' UPDT = :UPDT');
        SQL.Add(' WHERE SETCODE = :SETCODE');

        Params.ArraySize := Length(arrStockSet) - 1;

        for i := Low(arrStockSet) to High(arrStockSet) - 1 do
        begin
          with arrStockSet[i + 1] do
          begin
            ParamByName('SETCODE').asStrings[i] := sCODE;
            for j := 0 to 9 do
            begin
              if Length(iSeq) > j then
                ParamByName('ISEQ' + IntToStr(j + 1)).asintegers[i] := iSeq[j]
              else
                ParamByName('ISEQ' + IntToStr(j + 1)).asintegers[i] := 0;
            end;
            ParamByName('UPDT').asStrings[i] := sDateTime;
          end;
        end;

        Execute(Length(arrStockSet) - 1, 0);
      end;
    finally
      DM.DBDisConnect;
    end;
  end;
end;

procedure TForm_DATA1_3.FormResizeEND(var Message: TMessage);
begin
  Timer_Resize.Enabled := True;
end;

procedure TForm_DATA1_3.Timer_ResizeTimer(Sender: TObject);
begin
  Timer_Resize.Enabled := False;
  Panel_SetList.Width := Round(Width * 0.3);
  Panel_SetList_Group.Width := Round(Width * 0.2);

  with ListView_SetMenuList do
  begin
    Columns[0].Width := Round(Width * 0.3);
    Columns[1].Width := Round(Width * 0.38);
    Columns[2].Width := Round(Width * 0.28);
  end;

  if ListBox_SetList.ItemIndex <> -1 then
    ShowSetGroupList(ListBox_SetList.ItemIndex + 1);
end;

procedure TForm_DATA1_3.ToggleSwitch_UpdateClick(Sender: TObject);
begin
  iSelect_SetGroupSeq := -1;
end;

procedure TForm_DATA1_3.ShowSetList;
var
  i: Integer;
begin
  //
  ListBox_SetList.Clear;
  for i := Low(arrStockSet) + 1 to High(arrStockSet) do
  begin
    with arrStockSet[i] do
    begin
      ListBox_SetList.Items.Add(sCODE + ':' + sSETNAME);
    end;
  end;
end;

procedure TForm_DATA1_3.ListBox_SetListClick(Sender: TObject);
begin
  if ListBox_SetList.ItemIndex <> LISTVIEW_UNSELECT then
  begin
    ShowSetGroupList(ListBox_SetList.ItemIndex + 1);
  end;
end;

procedure TForm_DATA1_3.ScrollBox_MouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint;
  var Handled: Boolean);
begin
  if WheelDelta >= 0 then
    SendMEssage((Sender as TScrollBox).Handle, WM_VSCROLL, SB_LINELEFT, 0)
  else
    SendMEssage((Sender as TScrollBox).Handle, WM_VSCROLL, SB_LINERIGHT, 0);
end;

procedure TForm_DATA1_3.ShowSetGroupList(iSeq: Cardinal);
var
  vControl: TControl;
  i: Cardinal;

  sTest: String;
begin
  ListView_SetMenuList.Clear;
  iSelect_SetGroupSeq := -1;
  ToggleSwitch_Update.Visible := False;
  SendMEssage(ScrollBox_SetGroupList.Handle, WM_SETREDRAW, 0, 0);
  with ScrollBox_SetGroupList do
  begin
    if ControlCount <> 0 then
    begin
      for i := ControlCount - 1 Downto 0 do
      begin
        vControl := Controls[i];
        vControl.Visible := False;
      end;
    end;
  end;

  ToggleSwitch_Update.Visible := Length(arrStockSet[iSeq].iSeq) <> 0;
  if ToggleSwitch_Update.Visible then
  begin
    for i := Low(arrStockSet[iSeq].iSeq) to High(arrStockSet[iSeq].iSeq) do
    begin
      if arrStockSet[iSeq].iSeq[i] = 0 then
        Break
      else
      begin
        if FindComponent('StockInfo_' + IntToStr(i)) <> nil then
          vControl := (FindComponent('StockInfo_' + IntToStr(i)) as TFrame_ENV_Nav)
        else
        begin
          vControl := TFrame_ENV_Nav.Create(Self);
        end;

        with (vControl as TFrame_ENV_Nav) do
        begin
          Parent := ScrollBox_SetGroupList;
          Constraints.MinHeight := 45;
          Align := alBottom;
          Name := 'StockInfo_' + IntToStr(i);
          Tag := arrStockSet[iSeq].iSeq[i];

          Height := ScrollBox_SetGroupList.Height div 10;

          Label_Value.Color := clWhite;
          Label_Value.Font.Color := clBlack;

          Label_Value.Tag := i;
          Label_Value.Caption := IntToStr(Tag);
          Padding.SetBounds(1, 0, 1, 1);

          sTest := IntToStr(Tag);
          if arrStockSetMenus[Tag - 1].sName <> '' then
            Label_Value.Caption := Label_Value.Caption + ':' + arrStockSetMenus[Tag - 1].sName;

          Font.Size := DM.LabelFontSize(Label_Value);

          Align := alTop;
          Visible := True;
          onClick := FrameSetGroupClick;
        end;
      end;
    end;
  end;

  SendMEssage(ScrollBox_SetGroupList.Handle, WM_SETREDRAW, 1, 0);
  RedrawWindow(ScrollBox_SetGroupList.Handle, nil, 0, RDW_ERASE or RDW_INVALIDATE or RDW_FRAME or RDW_ALLCHILDREN);
end;

procedure TForm_DATA1_3.FrameSetGroupClick(Sender: TObject);
var
  i, iGroupSeq, iGroupChange, iGroupChange_Value: Integer;
  GroupItem: TListItem;

begin

  // 순번 변경 처리
  if ToggleSwitch_Update.State = tssOn then
  begin
    if iSelect_SetGroupSeq <> -1 then
    begin
      iGroupChange := (Sender as TFrame_ENV_Nav).Label_Value.Tag;
      with arrStockSet[ListBox_SetList.ItemIndex + 1] do
      begin
        iGroupChange_Value := iSeq[iGroupChange];

        iSeq[iGroupChange] := iSeq[iSelect_SetGroupSeq];
        iSeq[iSelect_SetGroupSeq] := iGroupChange_Value;
      end;

      iSelect_SetGroupSeq := -1;
      ShowSetGroupList(ListBox_SetList.ItemIndex + 1);
      exit;
    end;

  end;

  iGroupSeq := (Sender as TFrame_ENV_Nav).Tag - 1;
  iSelect_SetGroupSeq := (Sender as TFrame_ENV_Nav).Label_Value.Tag;
  ListView_SetMenuList.Clear;
  for i := Low(arrStockSetMenus[iGroupSeq].sOption_CODE) to High(arrStockSetMenus[iGroupSeq].sOption_CODE) do
  begin
    GroupItem := ListView_SetMenuList.Items.Add;
    with GroupItem, arrStockSetMenus[iGroupSeq] do
    begin
      Caption := sOption_CODE[i];
      SubItems.Add(sOption_Name[i]);
      SubItems.Add(formatFloat('##,###,##0', iOption_AMT[i]));
    end;
  end;

  with ScrollBox_SetGroupList do
  begin
    if ControlCount <> 0 then
    begin
      for i := ControlCount - 1 Downto 0 do
      begin
        if Controls[i] is TFrame_ENV_Nav then
        begin
          with (Controls[i] as TFrame_ENV_Nav) do
          begin
            Label_Value.Color := clWhite;
            Label_Value.Font.Color := clBlack;
          end;
        end;
      end;
    end;
  end;

  with (Sender as TFrame_ENV_Nav) do
  begin
    Label_Value.Color := $00A4580B;
    Label_Value.Font.Color := clWhite;
  end;

end;

procedure TForm_DATA1_3.Button_SetClick(Sender: TObject);
const
  SET_ADD = 0;
  SET_UPDATE = 1;
begin
  Form_Set := TForm_Set.Create(Self);
  try
    DM.SetBG(0);
    with Form_Set do
    begin
      SetBounds((Form_AirManager.Width - Width) div 2, (Form_AirManager.Height - Height) div 2, Width, Height);
      Tag := (Sender as TButton).Tag;
      case Tag of
        SET_ADD:
          begin
          end;
        SET_UPDATE:
          begin
            FrameEdit_Code.Edit_Value.ReadOnly := True;
            FrameEdit_Code.Edit_Value.Text := arrStockSet[ListBox_SetList.ItemIndex + 1].sCODE;
            FrameEdit_Name.Edit_Value.Text := arrStockSet[ListBox_SetList.ItemIndex + 1].sSETNAME;
            FrameEdit_Cnt.Edit_Value.Text := IntToStr(arrStockSet[ListBox_SetList.ItemIndex + 1].iCNT);
            RadioGroup_SetType.ItemIndex := arrStockSet[ListBox_SetList.ItemIndex + 1].iSETTYPE - 1;

            Button_CodeChk.Enabled := False;
            Button_OK.Caption := '수정';
            Button_Drop.Visible := True;
          end;
      end;

      ShowModal;
      case ModalResult of
        mrOk:
          begin
            DM.GetSets;
            ShowSetList;
          end;
      end;
    end;
  finally
    FreeAndNil(Form_Set);
    DM.SetBG(1);
  end;
end;

procedure TForm_DATA1_3.Button_SetGroupAddClick(Sender: TObject);
var
  arrList: array of String;
  Res: TResult_IS;
  i, iTag, iLen: Integer;
begin
  iTag := ListBox_SetList.ItemIndex + 1;
  if (ListBox_SetList.ItemIndex = -1) then
    exit
  else if Length(arrStockSet[iTag].iSeq) >= 10 then
  begin
    DM.GetPopup('세트당 최대 10개까지만,||그룹설정이 가능합니다.');
    exit;
  end
  else
  begin
    for i := Low(arrStockSetMenus) to High(arrStockSetMenus) do
      System.Insert(IntToStr(arrStockSetMenus[i].iSeq) + ' ' + arrStockSetMenus[i].sName, arrList, Length(arrList));

    Res := DM.GetList('추가하실 세트그룹을 선택해주세요.', arrList);
    if Res.Result_int <> -99 then
      System.Insert(Res.Result_int + 1, arrStockSet[iTag].iSeq, Length(arrStockSet[iTag].iSeq));

    ShowSetGroupList(ListBox_SetList.ItemIndex + 1);
  end;
end;

procedure TForm_DATA1_3.Button_SetGroupDeleteClick(Sender: TObject);
begin
  if iSelect_SetGroupSeq <> -1 then
  begin
    DELETE(arrStockSet[ListBox_SetList.ItemIndex + 1].iSeq, iSelect_SetGroupSeq, 1);
    ShowSetGroupList(ListBox_SetList.ItemIndex + 1);
  end;
end;

procedure TForm_DATA1_3.CheckBox_SimpleClick(Sender: TObject);
begin
  if CheckBox_Simple.Checked AND (DM.GetPopup(1, '해당 기능 사용시 ||모든 세트유형이 심플로 변경됩니다.||계속 진행하시겠습니까?').Result_int = 1) then
  begin

  end
  else
    CheckBox_Simple.Checked := False;
end;

end.
