unit fmDATA2_3;
interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids, Vcl.ExtCtrls, Vcl.ComCtrls;

type
  TForm_DATA2_3 = class(TForm)
    Label_Title: TLabel;
    CheckBox_AllCheck: TCheckBox;
    Panel_Footer: TPanel;
    Button_DEL: TButton;
    ListView_Tag: TListView;
    Label_Guide: TLabel;
    Button_Execute: TButton;
    Timer_Refrush: TTimer;
    procedure FormShow(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);

    procedure Button_ExecuteClick(Sender: TObject);
    procedure Button_DELClick(Sender: TObject);

    procedure Timer_RefrushTimer(Sender: TObject);
  private
    procedure ShowLockerInfo;
    { Private declarations }
  public
    { Public declarations }
    procedure ExecuteLocker(iExeType: Byte; iVal: SmallInt);
    procedure SaveLocker;
  protected
    procedure FormResizeEND(var Message: TMessage); message WM_EXITSIZEMOVE;
  end;

const
  Locker_Unsed = 'N';
  Locker_Used = 'Y';

  Locker_ADD = 0;
  Locker_DEL = 1;

var
  Form_DATA2_3: TForm_DATA2_3;

implementation

{$R *.dfm}

uses uDM;
{ TForm_DATA2_3 }

{
  ※ arrLocker에 UseFlag 값을 체크하여, 작업적용해야함.


}

procedure TForm_DATA2_3.Button_DELClick(Sender: TObject);
var
  Res: TResult_IS;
  arrList: array of String;
  i: Integer;
  bChk: Boolean;
begin
  if ListView_Tag.ItemIndex >= 0 then
  begin
    SetLength(arrList, 2);
    arrList[0] := '모든 사물함의 태그 제거';
    arrList[1] := '선택한 사물함만 제거';

    Res := DM.GetList('태그 제거 유형을 선택해주세요.', arrList);
    if Res.Result_int = -99 then
      Exit;
  end
  else
  begin
    Res.Result_int := 0;
  end;

  bChk := False;
  case Res.Result_int of
    0:
      begin
        for i := Low(arrLocker) to High(arrLocker) do
        begin
          with arrLocker[i] do
          begin
            if (bChk = False) AND (sUSED = Locker_Used) AND (DM.GetPopup(1, '사용중인 락커가 있습니다.||계속 진행하시겠습니까?').Result_int = 1) then
            begin
              bChk := True;
            end;

            sTAG := '';
            sSTATIC := Locker_Unsed;
          end;
        end;
      end;
    1:
      begin
        while ListView_Tag.ItemIndex >= 0 do
        begin
          i := ListView_Tag.ItemIndex;
          with arrLocker[i] do
          begin
            if (bChk = False) AND (sUSED = Locker_Used) AND (DM.GetPopup(1, '사용중인 락커가 있습니다.||계속 진행하시겠습니까?').Result_int = 1) then
            begin
              bChk := True;
            end;

            sTAG := '';
            sSTATIC := Locker_Unsed;
          end;

          ListView_Tag.ItemIndex := -1;
        end;

      end;
  end;

  ShowLockerInfo;
end;

procedure TForm_DATA2_3.Button_ExecuteClick(Sender: TObject);
var
  LockerInfo: TLocker_info;
  LockerItem: TListItem;
  i, iVal: Integer;
  sVal: String;
begin
  sVal := IntToStr(Length(arrLocker));
  if Inputquery('사물함(락커) 수량을 입력해주세요. [최대 50000]', '수량(기존 ' + sVal + ') : ', sVal) then
  begin
    ListView_Tag.Clear;
    iVal := StrToIntDef(sVal, 0);

    if iVal < 0 then
    begin
      DM.GetPopup('최소 0개 이상이어야 합니다.');
      Exit;
    end
    else if iVal > 50000 then
      iVal := 50000;

    if Length(arrLocker) > iVal then // 제거
      ExecuteLocker(Locker_DEL, iVal)
    else if Length(arrLocker) < iVal then // 등록
      ExecuteLocker(Locker_ADD, iVal);

    ShowLockerInfo;
  end;
end;

procedure TForm_DATA2_3.ExecuteLocker(iExeType: Byte; iVal: SmallInt);
var
  LockerInfo: TLocker_info;
  i, j: Word;
begin
  //
  if NOT DM.DBConnect then
    Exit
  else
  begin
    try
      DM.DBSQLClear;

      with DM.FDQ do
      begin
        case iExeType of
          Locker_ADD:
            begin
              sql.Text := 'INSERT INTO TAG (SEQ, TAG, USEFLAG, STATIC) VALUES(:SEQ, :TAG, :USEFLAG, :STATIC)';
              Params.ArraySize := iVal - Length(arrLocker);

              j := 0;
              for i := Length(arrLocker) to iVal - 1 do
              begin
                with LockerInfo do
                begin
                  iSEQ := i + 1;
                  sTAG := '';
                  sUSED := Locker_Unsed;
                  sSTATIC := Locker_Unsed;

                  ParamByName('SEQ').AsIntegers[j] := iSEQ;
                  ParamByName('TAG').AsStrings[j] := sTAG;
                  ParamByName('USEFLAG').AsStrings[j] := sUSED;
                  ParamByName('STATIC').AsStrings[j] := sSTATIC;
                end;

                System.Insert(LockerInfo, arrLocker, Length(arrLocker));
                Inc(j);
              end;

              Execute(Params.ArraySize, 0);
            end;
          Locker_DEL:
            begin
              sql.Text := 'DELETE FROM TAG WHERE SEQ > ' + IntToStr(iVal);

              System.Delete(arrLocker, iVal, Length(arrLocker));
              ExecSQL;
            end;
        end;
      end;
    finally
      DM.DBDisConnect;
    end;
  end;

end;

procedure TForm_DATA2_3.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveLocker;
end;

procedure TForm_DATA2_3.FormKeyPress(Sender: TObject; var Key: Char);
var
  i: Word;
begin
  //
  if ListView_Tag.ItemIndex >= 0 then
  begin
    i := ListView_Tag.ItemIndex;
    if Key = #13 then
    begin
      ListView_Tag.ItemIndex := -1;
      ListView_Tag.ItemIndex := i + 1;
      i := ListView_Tag.ItemIndex;
    end;

    with arrLocker[i] do
    begin
      if Key = #8 then
        sTAG := Copy(sTAG, 1, Length(sTAG) - 1)
      else if (Key = #27) or (Key = #46) then
        sTAG := ''
      else
      begin
        sTAG := sTAG + Key;
      end;

      if Trim(sTAG) = '' then
        sSTATIC := Locker_Unsed
      else
        sSTATIC := Locker_Used;

      ListView_Tag.Items.Item[i].SubItems[0] := sTAG;
      ListView_Tag.Items.Item[i].SubItems[2] := sSTATIC;
    end;
    Key := #0;
  end;
end;

procedure TForm_DATA2_3.FormResizeEND(var Message: TMessage);
begin
  Timer_Refrush.Enabled := True;
end;

procedure TForm_DATA2_3.FormShow(Sender: TObject);
begin
  if DM.GetlockerTag then
  begin
    Timer_Refrush.Enabled := True;
    ShowLockerInfo;
  end
  else
    Label_Guide.Caption := '';
end;

procedure TForm_DATA2_3.SaveLocker;
var
  i: Word;
begin
  if Length(arrLocker) = 0 then
    Exit;

  if (NOT DM.DBConnect) then
    Exit
  else
  begin
    DM.DBSQLClear;
    try
      with DM.FDQ do
      begin
        sql.Text := 'UPDATE TAG SET TAG = :Tag, STATIC =:STATIC WHERE SEQ = :SEQ';
        Params.ArraySize := Length(arrLocker);

        for i := Low(arrLocker) to High(arrLocker) do
        begin
          with arrLocker[i] do
          begin
            ParamByName('Tag').AsStrings[i] := DM.AnsiFormat(sTAG, 50);
            ParamByName('STATIC').AsStrings[i] := sSTATIC;
            ParamByName('SEQ').AsIntegers[i] := iSEQ;
          end;
        end;

        Execute(Length(arrLocker), 0);
      end;
    finally
      DM.DBDisConnect;
    end;
  end;
end;

procedure TForm_DATA2_3.ShowLockerInfo;
var
  i, j, k: Word;
  LockerList: TListItem;
begin
  // init
  ListView_Tag.Clear;
  Label_Guide.Caption := '정보를 불러오고 있습니다.' + #13#10 + '잠시만 기다려주세요.';
  Application.ProcessMessages;
  SendMEssage(ListView_Tag.Handle, WM_SETREDRAW, 0, 0);
  if Length(arrLocker) = 0 then
    Exit;

  j := 0;
  k := 0;
  for i := Low(arrLocker) to High(arrLocker) do
  begin
    with arrLocker[i] do
    begin
      LockerList := ListView_Tag.Items.Add;
      with LockerList do
      begin
        Caption := IntToStr(iSEQ);
        SubItems.Add(sTAG);
        SubItems.Add(sUSED);
        SubItems.Add(sSTATIC);
      end;

      if sUSED = Locker_Used then
        Inc(j);

      if sSTATIC = Locker_Used then
        Inc(k);
    end;
  end;
  SendMEssage(ListView_Tag.Handle, WM_SETREDRAW, 1, 0);
  RedrawWindow(ListView_Tag.Handle, nil, 0, RDW_ERASE or RDW_INVALIDATE or RDW_FRAME or RDW_ALLCHILDREN);

  Label_Guide.Caption := //
    '총 사물함(락커) 수 : ' + IntToStr(Length(arrLocker)) + #13#10 + //
    '사용중인 사물함 수 : ' + IntToStr(j) + #13#10 + //
    '등록된 전체 태그수 : ' + IntToStr(k) + #13#10;
end;

procedure TForm_DATA2_3.Timer_RefrushTimer(Sender: TObject);
begin
  Timer_Refrush.Enabled := False;
  with ListView_Tag do
  begin
    Column[0].Width := Round(Width * 0.1);
    Column[1].Width := Round(Width * 0.525);
    Column[2].Width := Round(Width * 0.175);
    Column[3].Width := Round(Width * 0.175);
  end;
end;

end.