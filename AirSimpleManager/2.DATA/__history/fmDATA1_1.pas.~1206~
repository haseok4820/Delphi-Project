unit fmDATA1_1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.ComCtrls, Frame_ComboBox, Frame_Nav, Vcl.Grids,
  Frame_StockInfo;

type
  TLabel = class(Vcl.StdCtrls.TLabel)
  protected
    // procedure WMEraseBkgnd(var Message: TWmEraseBkgnd); message WM_ERASEBKGND;
  end;

  TForm_DATA1_1 = class(TForm)
    Timer_Refresh: TTimer;
    Button_ViewCategory: TButton;
    Button_ViewSearch: TButton;
    GroupBox_Category: TGroupBox;
    ScrollBox_Category: TScrollBox;
    Button_CategoryDel: TButton;
    Button_CategoryAdd: TButton;
    Label_Title: TLabel;
    Panel_Stock: TPanel;
    Panel_SearchOption: TPanel;
    FrameCombo_Search: TFrame_ENV_ComboBox;
    Button_Search: TButton;
    Edit_Search: TEdit;
    Panel_Footer: TPanel;
    Label_Info: TLabel;
    Button_StockAdd: TButton;
    Button_StockDel: TButton;
    Panel_Page: TPanel;
    Label_Pageing: TLabel;
    Button_Next: TButton;
    Button_Prev: TButton;
    Panel_MenuInfo_Column: TPanel;
    Label_MenuName: TLabel;
    Label_MenuCode: TLabel;
    FrameCombo_Combo: TFrame_ENV_ComboBox;
    FrameCombo_Edit: TFrame_ENV_ComboBox;
    ScrollBox_List: TScrollBox;
    Button_CategoryFix: TButton;
    Button_StockBatch: TButton;
    procedure FormShow(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);

    procedure Timer_RefreshTimer(Sender: TObject);
    procedure ScrollBox_MouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
    procedure Edit_SearchEnter(Sender: TObject);
    procedure Edit_SearchKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure Button_ViewClick(Sender: TObject);
    procedure ButtonPageClick(Sender: TObject);

    procedure Button_CategoryDelClick(Sender: TObject);
    procedure Button_CategoryAddClick(Sender: TObject);

    procedure Button_StockAddClick(Sender: TObject);
    procedure Button_StockDelClick(Sender: TObject);
    procedure Button_StockBatchClick(Sender: TObject);

  private
    { Private declarations }
    procedure SetSearchEdit;

    function GetCategorys: Boolean;
    // function GetStocks: Boolean;
    function GetSets: Boolean;
    procedure ShowCategory;
    procedure ShowStockInfo(iWork: Integer);
    procedure StockFrame(FrameName: String; FrameTag, FrameSEQ: Integer);
    procedure Frame_EditChange(Sender: TObject); // List
    procedure Frame_ComboChange(Sender: TObject); // List
    procedure FrameComboClick(Sender: TObject); // Form
    procedure FrameNavClick(Sender: TObject); // Form

    procedure ExecuteETC(iETCcategory, iETCType: Byte);
    procedure StockUpdate;

  protected
    procedure FormResizeEND(var Message: TMessage); message WM_EXITSIZEMOVE;

  public
    { Public declarations }

  end;

CONST
  SEARCH_NORMAL = 0;
  SEARCH_PRICE = 1;
  SEARCH_KIT = 2;
  SEARCH_SET = 3;

  EDIT_PRICE = 0;
  EDIT_NOTICE = 1;
  EDIT_TIME = 2;
  EDIT_ADDPRICE = 3;
  EDIT_ADDTIME = 4;

  COMBO_KIT = 0;
  COMBO_CATEGORY = 1;
  COMBO_SET = 2;
  COMBO_VAT = 3;
  COMBO_SPEC = 4;

  ETC_TYPE_BATCH_FUNCTION = 0; // 일괄설정
  ETC_TYPE_EXCEL_EXPORT = 1; // 엑셀 내보내기
  ETC_TYPE_EXCEL_IMPORT = 2; // 엑셀 가져오기
  // ETC_TYPE_LABEL_PRINT = 3; // 라벨 바코드 출력

  ETC_TYPE_ALL = 0; // 모든 상품 처리
  ETC_TYPE_CHOICE = 1; // 선택한 상품만 처리

var
  Form_DATA1_1: TForm_DATA1_1;
  iPage: Cardinal = 0;
  sSearch_Category: String = '';

  arrSearchOption: array [0 .. 1] of String = (
    '상품명,상품코드(바코드)로 검색',
    '금액으로 검색'
    // '주방출력구분 검색',
    // '세트분류로 검색'
  );

  arrStockEdit: array [0 .. {$IFDEF DEBUG}5{$ELSE}4{$ENDIF}] of String = (
    '판매금액',
    '상품설명(키오스크 심플세트 전용)',
    '기본시간(시간제 전용)',
    '추가요금(시간제 전용)',
    '추가시간(분)(시간제 전용)'{$IFDEF DEBUG},
    '프린터 드라이버'{$ENDIF}
  );

  arrStockCombo: array [0 .. 3] of String = (
    '주방출력',
    '상품구분',
    '세트구분',
    '과세구분'
    // '특정메뉴(품절유무)'
  );

  arrStockType: array [0 .. 8] of String = (
    '과세',
    '면세',
    '시간',
    '옵션',
    '옵면',
    '비품',
    '단종',
    '하위',
    '개체'
  ); // 상품 구분

  arrStockKitPrn: array of String;

  { = (
    '출력안함',
    'Printer1',
    'Printer2',
    'Printer3',
    'Printer4',
    'Printer5',
    'Printer6',
    '특정메뉴전송1',
    '특정메뉴전송2',
    '특정메뉴전송3',
    '특정메뉴전송4',
    '특정메뉴전송5'
    ); // 주방출력
  }

  arrEtcFunction: array [0 .. 2] of String = (
    '일괄설정',
    '엑셀 내보내기',
    '엑셀 가져오기'
    // , '라벨바코드 출력'  { Unused }
  );

implementation

{$R *.dfm}

uses uMain, uDM, fmCategory, ufmPopup, fmStock;

{ TForm_DATA1_1 }

procedure TForm_DATA1_1.Button_CategoryAddClick(Sender: TObject);
var
  bEnd, bExists: Boolean;
  i: Cardinal;
begin
  bEnd := False;
  Form_Category := TForm_Category.Create(DM);
  try
    DM.SetBG(0);
    with Form_Category do
    begin
      SetBounds((Form_AirManager.Width - Width) div 2, (Form_AirManager.Height - Height) div 2, Width, Height);
      case (Sender as TButton).Tag of
        0:
          begin
            ButtonOK.Caption := '등록하기';
          end;
        1:
          begin
            if sSearch_Category = '' then
              Exit;

            FrameEdit_CODE.Edit_Value.ReadOnly := True;
            ButtonOK.Caption := '수정하기';
            sCODE := sSearch_Category;
            for i := Low(arrStockCategoryInfo) to High(arrStockCategoryInfo) do
              if arrStockCategoryInfo[i].sCODE = sCODE then
              begin
                sName := arrStockCategoryInfo[i].sName;
                Break;
              end;
          end;
      end;
      repeat
        FrameEdit_CODE.Edit_Value.Text := sCODE;
        FrameEdit_NAME.Edit_Value.Text := sName;
        ShowModal;
        case ModalResult of
          mrOk:
            begin
              if NOT DM.DBConnect then
              begin
                DM.GetPopup('데이터가 연결되지 않아,||처리하지 못했습니다.');
                bEnd := True;
              end;

              case (Sender as TButton).Tag of
                0:
                  begin
                    bExists := False;
                    for i := Low(arrStockCategoryInfo) to High(arrStockCategoryInfo) do
                    begin
                      if arrStockCategoryInfo[i].sCODE = sCODE then
                      begin
                        DM.GetPopup('이미 존재하는 분류코드입니다.||다른 코드로 변경해주세요.');
                        bExists := True;
                        Break;
                      end;
                    end;

                    if NOT bExists then
                    begin
                      with DM.FDQ do
                      begin
                        try
                          DM.DBSQLClear;
                          SQL.Text := 'INSERT INTO HSTOCKGOO (GUBUNCODE, GUBUNNAME) VALUES(:CODE, :NAME)';
                          ParamByName('CODE').AsString := DM.AnsiFormat(sCODE);
                          ParamByName('NAME').AsString := DM.AnsiFormat(sName, 50);
                          ExecSQL;
                        finally
                          DM.FDQ.CLose;
                          DM.DBDisConnect;
                        end;

                      end;
                    end;
                  end;
                1:
                  begin
                    with DM.FDQ do
                    begin
                      try
                        DM.DBSQLClear;
                        SQL.Text := 'UPDATE HSTOCKGOO SET GUBUNNAME = :NAME WHERE GUBUNCODE = :CODE';
                        ParamByName('CODE').AsString := DM.AnsiFormat(sSearch_Category);
                        ParamByName('NAME').AsString := DM.AnsiFormat(sName, 50);
                        ExecSQL;
                      finally
                        DM.FDQ.CLose;
                        DM.DBDisConnect;
                      end;
                    end;
                  end;
              end;
              bEnd := True;
              GetCategorys;
            end;
          mrNO:
            begin
              DM.GetPopup('입력하신 정보를 확인해주세요.');
            end;
          mrCancel:
            begin
              bEnd := True;
            end;
        end;
      until bEnd;
    end;
  finally
    Form_Category.Free;
    DM.SetBG(1);
  end;
end;

procedure TForm_DATA1_1.Button_CategoryDelClick(Sender: TObject);
begin
  if DM.GetPopup(1, '선택하신 분류를 삭제하시겠습니까?||삭제시 복구가 불가합니다.').Result_int <> 1 then
    Exit;

  if NOT DM.DBConnect then
    Exit
  else
  begin
    with DM.FDQ do
    begin
      DM.DBSQLClear;
      SQL.Text := 'DELETE FROM HSTOCKGOO WHERE GUBUNCODE = :CategoryCODE';
      ParamByName('CategoryCODE').AsString := sSearch_Category;

      ExecSQL;
      DM.FDConn.Commit;
      sSearch_Category := '';
      GetCategorys;
      DM.GetStocks;
      Timer_Refresh.Tag := 0;
      ShowStockInfo(Timer_Refresh.Tag);
    end;
  end;
end;

procedure TForm_DATA1_1.ButtonPageClick(Sender: TObject);
var
  iTag: Integer;
begin
  iTag := Timer_Refresh.Tag + (Sender as TButton).Tag;
  if (iTag < 0) OR (iTag >= iPage) then
    Exit
  else
  begin
    Timer_Refresh.Tag := iTag;
    ShowStockInfo(Timer_Refresh.Tag);
  end;
end;

procedure TForm_DATA1_1.Edit_SearchEnter(Sender: TObject);
begin
  Timer_RefreshTimer(Button_Search);
end;

procedure TForm_DATA1_1.Edit_SearchKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = 13 then
    Edit_SearchEnter(nil);
end;

procedure TForm_DATA1_1.ExecuteETC(iETCcategory, iETCType: Byte);
begin
  case iETCcategory of
    ETC_TYPE_BATCH_FUNCTION:
      begin

      end;
  end;
end;

procedure TForm_DATA1_1.Button_StockAddClick(Sender: TObject);
begin
  Form_Stock := TForm_Stock.Create(Self);
  try
    with Form_Stock do
    begin
      ShowModal;
      case ModalResult of
        mrOk:
          begin
            DM.GetStocks;
            ShowStockInfo(0);
          end;
      end;
    end;
  finally
    FreeAndNil(Form_Stock);
  end;
end;

procedure TForm_DATA1_1.Button_StockBatchClick(Sender: TObject);
var
  i: Word;

  Res, Res2: TResult_IS;
  arrEtcExecute_Type: array of String;

  bTypeChk: Boolean;

begin
  // 작업 유형
{$IFDEF DEBUG}
  Res := DM.GetList('작업 유형을 선택해주세요.', arrEtcFunction);
{$ELSE}
  Res.Result_int := ETC_TYPE_BATCH_FUNCTION;
{$ENDIF}
  for i := Low(arrStockInfo) to High(arrStockInfo) do
  begin
    if arrStockInfo[i].bCHk then
    begin
      bTypeChk := True;
      Break;
    end;
  end;

  // 작업 범위
  if bTypeChk then
  begin
    case Res.Result_int of
      ETC_TYPE_BATCH_FUNCTION, ETC_TYPE_EXCEL_EXPORT:
        begin
          SetLength(arrEtcExecute_Type, 3);
          arrEtcExecute_Type[0] := '전체 상품';
          arrEtcExecute_Type[1] := '선택한 상품만';
          arrEtcExecute_Type[1] := '검색된 상품만';

          Res2 := DM.GetList('작업 범위를 선택해주세요.', arrEtcFunction);
        end;
      ETC_TYPE_EXCEL_IMPORT:
        begin
          SetLength(arrEtcExecute_Type, 2);
          arrEtcExecute_Type[0] := '덮어씌우기';
          arrEtcExecute_Type[1] := '건너뛰기';

          Res2 := DM.GetList('중복된 상품이 있을경우..', arrEtcFunction);
        end;
    end;
  end
  else
  begin
    Res2.Result_int := 0;
  end;

  ExecuteETC(Res.Result_int, Res2.Result_int);

end;

procedure TForm_DATA1_1.Button_StockDelClick(Sender: TObject);
var
  arrDel: array of String;
  i: Integer;
begin
  if NOT DM.DBConnect then
  begin
    DM.GetPopup('데이터가 연결되지 않아, 처리할 수 없습니다.');
    Exit;
  end;
  for i := Low(arrStockInfo) to High(arrStockInfo) do
  begin
    if arrStockInfo[i].bCHk then
      System.Insert(arrStockInfo[i].sStockCode, arrDel, 0);
  end;

  if (Length(arrDel) = 0) OR //
    (DM.GetPopup(1, '총 ' + IntToSTr(Length(arrDel)) + '개 상품을 삭제하시겠습니까?||삭제후에는 복구할 수 없습니다.').Result_int <> 1) then
    Exit;

  with DM.FDQ do
  begin
    DM.DBSQLClear;
    SQL.Text := 'DELETE FROM HSTOCK WHERE STOCKCODE = :STOCKCODE';
    Params.ArraySize := Length(arrDel);

    for i := Low(arrDel) to High(arrDel) do
    begin
      ParamByName('STOCKCODE').AsStrings[i] := arrDel[i];
    end;

    Execute(Length(arrDel), 0);
    DM.FDConn.Commit;
    DM.GetStocks;
    Timer_Refresh.Tag := 0;
    ShowStockInfo(Timer_Refresh.Tag);
  end;
end;

procedure TForm_DATA1_1.Button_ViewClick(Sender: TObject);
const
  VIEW_SEARCH = 0;
  VIEW_CATEGORY = 1;
begin
  case (Sender as TButton).Tag of
    VIEW_SEARCH:
      begin
        Panel_SearchOption.Visible := NOT Panel_SearchOption.Visible;
        ShowStockInfo(Timer_Refresh.Tag);
      end;
    VIEW_CATEGORY:
      GroupBox_Category.Visible := NOT GroupBox_Category.Visible;
  end;
  Timer_Refresh.Enabled := True;
end;

procedure TForm_DATA1_1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  StockUpdate;
end;

procedure TForm_DATA1_1.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin

  if Key = 113 then
    Button_CategoryAddClick(Button_CategoryAdd)
  else if Key = 114 then
    Button_StockAddClick(Button_StockAdd)
  else if Key = 9 then
  begin
    if Shift = [ssCtrl] then
      ButtonPageClick(Button_Next)
    else if Shift = [ssCtrl, ssShift] then
      ButtonPageClick(Button_Prev);
  end;
end;

procedure TForm_DATA1_1.FormResizeEND(var Message: TMessage);
begin
  inherited;
  Timer_Refresh.Tag := 0;
  Label_Pageing.Caption := Label_Pageing.Hint + IntToSTr(Timer_Refresh.Tag + 1);
  Timer_Refresh.Enabled := True;
end;

procedure TForm_DATA1_1.FormShow(Sender: TObject);
var
  i: Byte;
begin
  Delete(arrStockKitPrn, 0, Length(arrStockKitPrn));
  if FoodCourt then
  begin
    SetLength(arrStockKitPrn, 33);
    for i := Low(arrStockKitPrn) to High(arrStockKitPrn) do
    begin
      if i = Low(arrStockKitPrn) then
        arrStockKitPrn[i] := '출력안함'
      else
        arrStockKitPrn[i] := 'Printer' + IntToSTr(i);
    end;
  end
  else
  begin
    SetLength(arrStockKitPrn, 12);
    for i := Low(arrStockKitPrn) to High(arrStockKitPrn) do
    begin
      if i = Low(arrStockKitPrn) then
        arrStockKitPrn[i] := '출력안함'
      else if i < 7 then
        arrStockKitPrn[i] := 'Printer' + IntToSTr(i)
      else
        arrStockKitPrn[i] := '특정메뉴전송' + IntToSTr(i - 6);
    end;
  end;

  sSearch_Category := '';
  FrameCombo_Search.OnClick := FrameComboClick;
  FrameCombo_Combo.OnClick := FrameComboClick;
  FrameCombo_Edit.OnClick := FrameComboClick;

  GetCategorys;
  GetSets;
  if NOT DM.GetStocks then
  begin
    DM.GetPopup('상품 정보를 찾을 수 없습니다.||인터넷 및 서버연결 확인후 다시 시도해주세요.');
    Exit;
  end
  else
    Timer_Refresh.Enabled := True;

  Edit_Search.SetFocus;
end;

procedure TForm_DATA1_1.FrameComboClick(Sender: TObject);
var
  Res: TResult_IS;
begin
  if (Sender as TFrame) = FrameCombo_Search then
    Res := DM.GetList('검색유형을 선택해주세요.', arrSearchOption)
  else if (Sender as TFrame) = FrameCombo_Edit then
    Res := DM.GetList('선택해주세요.', arrStockEdit)
  else if (Sender as TFrame) = FrameCombo_Combo then
    Res := DM.GetList('선택해주세요.', arrStockCombo);

  if Res.Result_int <> -99 then
  begin
    with (Sender as TFrame_ENV_ComboBox) do
    begin
      Tag := Res.Result_int;
      Label_Key.Caption := Res.Result_Str;
    end;

    if (Sender as TFrame) = FrameCombo_Search then
      SetSearchEdit
    else
      Timer_RefreshTimer(nil);
  end;

end;

procedure TForm_DATA1_1.FrameNavClick(Sender: TObject);
var
  i: Cardinal;
begin
  with ScrollBox_Category do
  begin
    if ControlCount <> 0 then
    begin
      for i := ControlCount - 1 Downto 0 do
      begin
        if Controls[i] is TFrame_ENV_Nav then
        begin
          with (Controls[i] as TFrame_ENV_Nav) do
          begin
            Label_Value.Color := clWhite;
            Label_Value.Font.Color := clBlack;
          end;
        end;
      end;
    end;
  end;

  with Sender as TFrame_ENV_Nav do
  begin
    Label_Value.Color := $00A4580B;
    Label_Value.Font.Color := clWhite;
    sSearch_Category := Hint;
  end;

  Timer_Refresh.Tag := 0;
  ShowStockInfo(0);

end;

procedure TForm_DATA1_1.Frame_ComboChange(Sender: TObject);
var
  iTag, iSEQ: NativeInt;
  Res: TResult_IS;

  arrStr: array of String;
  i: Cardinal;
begin
  iTag := (FindComponent((Sender as TFrame_ENV_ComboBox).Parent.Name) as TFrameStockInfo).Tag;
  iSEQ := (Sender as TFrame_ENV_ComboBox).Tag;
  with (Sender as TFrame_ENV_ComboBox) do
  begin

    case iSEQ of
      COMBO_KIT:
        Res := DM.GetList('주방출력유무를 선택해주세요.', arrStockKitPrn);
      COMBO_CATEGORY:
        begin
          for i := Low(arrStockCategoryInfo) to High(arrStockCategoryInfo) do
            System.Insert(arrStockCategoryInfo[i].sName, arrStr, i);
          Res := DM.GetList('상품분류를 선택해주세요.', arrStr);
        end;
      COMBO_SET:
        begin
          for i := Low(arrStockSet) to High(arrStockSet) do
            System.Insert(arrStockSet[i].sSETNAME, arrStr, i);
          Res := DM.GetList('세트유형을 선택해주세요.', arrStr);
        end;
      COMBO_VAT:
        Res := DM.GetList('솽품유형을 선택해주세요.', arrStockType);
      COMBO_SPEC:
        Res := DM.GetList('특별유무를  선택해주세요.', arrStockKitPrn);
    end;

    if Res.Result_int <> -99 then
    begin
      Label_Key.Tag := Res.Result_int;
      Label_Key.Caption := Res.Result_Str;

      case iSEQ of
        COMBO_KIT:
          begin
            if Label_Key.Tag = 0 then
              arrStockInfo[iTag].sKitPrn := ''
            else
              arrStockInfo[iTag].sKitPrn := IntToSTr(Label_Key.Tag);
          end;
        COMBO_CATEGORY:
          arrStockInfo[iTag].sGubunCode := arrStockCategoryInfo[Label_Key.Tag].sCODE;
        COMBO_SET:
          arrStockInfo[iTag].sSETCODE := arrStockSet[Label_Key.Tag].sCODE;
        COMBO_VAT:
          arrStockInfo[iTag].sVAT := arrStockType[Label_Key.Tag];
        COMBO_SPEC:
          arrStockInfo[iTag].iQTY := Label_Key.Tag;
      end;

    end;
  end;
end;

procedure TForm_DATA1_1.Frame_EditChange(Sender: TObject);
var
  sText: String;
  iTag: Integer;
begin
  iTag := (FindComponent((Sender as TEdit).Parent.Name) as TFrameStockInfo).Tag;
  if (Sender as TEdit).Name = 'Edit_StockName' then
    arrStockInfo[iTag].sStockName := (Sender as TEdit).Text
  else
  begin
    sText := (Sender as TEdit).Text;
    case (Sender as TEdit).Tag of
      EDIT_PRICE:
        arrStockInfo[iTag].iStockAMT := StrToIntDef(sText, 0);
      EDIT_NOTICE:
        arrStockInfo[iTag].sStandard := sText;
      EDIT_TIME:
        arrStockInfo[iTag].sUnit := sText;
      EDIT_ADDPRICE:
        arrStockInfo[iTag].iMaeipAMT := StrToIntDef(sText, 0);
      EDIT_ADDTIME:
        arrStockInfo[iTag].iNowMaeip := StrToIntDef(sText, 0);
    end;
  end;

end;

function TForm_DATA1_1.GetCategorys: Boolean;
var
  StockCategory: TStock_Category;
begin
  Result := False;
  Delete(arrStockCategoryInfo, 0, Length(arrStockCategoryInfo));
  if NOT DM.DBConnect then
    Exit
  else
  begin
    try
      StockCategory.sCODE := '';
      StockCategory.sName := '전체/미분류';
      System.Insert(StockCategory, arrStockCategoryInfo, 0);

      with DM.FDQ do
      begin
        DM.DBSQLClear;
        SQL.Text := 'SELECT GUBUNCODE, GUBUNNAME FROM HSTOCKGOO';
        OPEN;
        while Not Eof do
        begin
          StockCategory.sCODE := FieldByName('GUBUNCODE').AsString;
          StockCategory.sName := FieldByName('GUBUNNAME').AsString;

          System.Insert(StockCategory, arrStockCategoryInfo, High(arrStockCategoryInfo) + 1);
          Next;
        end;
      end;
      Result := True;
    finally
      DM.FDQ.CLose;
      DM.DBDisConnect;
    end;
  end;
  ShowCategory;
end;

function TForm_DATA1_1.GetSets: Boolean;

var
  StockSet: TStock_Set;
begin
  Result := False;
  Delete(arrStockSet, 0, Length(arrStockSet));
  if NOT DM.DBConnect then
    Exit
  else
  begin
    try
      StockSet.sCODE := '';
      StockSet.sSETNAME := '세트 미지정';
      System.Insert(StockSet, arrStockSet, 0);

      with DM.FDQ do
      begin
        DM.DBSQLClear;
        SQL.Text := 'SELECT SETCODE, SETNAME FROM HSET';
        OPEN;
        while Not Eof do
        begin
          StockSet.sCODE := FieldByName('SETCODE').AsString;
          StockSet.sSETNAME := FieldByName('SETNAME').AsString;

          System.Insert(StockSet, arrStockSet, High(arrStockSet) + 1);
          Next;
        end;
      end;
      Result := True;
    finally
      DM.FDQ.CLose;
      DM.DBDisConnect;
    end;
  end;

end;
{
  function TForm_DATA1_1.GetStocks: Boolean;
  var
  StockData: TStock_Info;
  sSearch: String;
  begin
  //
  Result := False;
  DELETE(arrStockInfo, 0, Length(arrStockInfo));
  if NOT DM.DBConnect then
  Exit
  else
  begin
  sSearch := Edit_Search.Text;
  try
  try
  with DM.FDQ do
  begin
  DM.DBSQLClear;
  SQL.Text := 'SELECT STOCKCODE, STOCKNAME, SALEAMT, GUBUNCODE, KITPRN, MAEIPAMT, NOWMAEIP, STANDARD, UNIT, VAT, QTY, SETCODE FROM HSTOCK';
  SQL.Add(' ORDER BY STOCKCODE DESC ');
  OPEN;
  while Not Eof do
  begin
  with StockData do
  begin
  sStockCode := FieldByName('STOCKCODE').AsString;
  sStockName := FieldByName('STOCKNAME').AsString;
  iStockAMT := FieldByName('SALEAMT').AsInteger;
  sGubunCode := FieldByName('GUBUNCODE').AsString;
  sKitPrn := FieldByName('KITPRN').AsString;
  iMaeipAMT := FieldByName('MAEIPAMT').AsInteger;
  iNowMaeip := FieldByName('NOWMAEIP').AsInteger;
  sStandard := FieldByName('STANDARD').AsString;
  sUnit := FieldByName('UNIT').AsString;
  sVAT := FieldByName('VAT').AsString;
  iQTY := FieldByName('QTY').AsInteger;
  sSETCODE := FieldByName('SETCODE').AsString;

  bCHk := False;
  end;
  System.Insert(StockData, arrStockInfo, High(arrStockInfo) + 1);
  Next;
  end;
  end;
  Result := True;
  except
  ON E: Exception do
  begin
  DM.SetLog('상품 가져오는 중 오류 ' + E.Message);
  end;
  end;
  finally
  DM.FDQ.CLose;
  DM.DBDisConnect;
  end;
  end;
  end; }

procedure TForm_DATA1_1.ScrollBox_MouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint;
  var Handled: Boolean);
begin
  if WheelDelta >= 0 then
    SendMEssage((Sender as TScrollBox).Handle, WM_VSCROLL, SB_LINELEFT, 0)
  else
    SendMEssage((Sender as TScrollBox).Handle, WM_VSCROLL, SB_LINERIGHT, 0);
end;

procedure TForm_DATA1_1.SetSearchEdit;
begin
  //
  Edit_Search.Clear;
  Edit_Search.SetFocus;
  case FrameCombo_Search.Tag of
    SEARCH_NORMAL:
      begin
        Edit_Search.NumbersOnly := False;
        Edit_Search.MaxLength := 0;
      end;
    SEARCH_PRICE:
      begin
        Edit_Search.NumbersOnly := True;
        Edit_Search.MaxLength := 8;
      end;
  end;
end;

procedure TForm_DATA1_1.ShowCategory;
var
  i: Integer;
  DelCon: TControl;
begin
  SendMEssage(ScrollBox_Category.Handle, WM_SETREDRAW, 0, 0);

  if ScrollBox_Category.ControlCount <> 0 then
  begin
    for i := ScrollBox_Category.ControlCount - 1 Downto 0 do
    begin
      DelCon := ScrollBox_Category.Controls[i];
      FreeAndNil(DelCon);
    end;
  end;

  for i := Low(arrStockCategoryInfo) to High(arrStockCategoryInfo) do
  begin
    with TFrame_ENV_Nav.Create(Self) do
    begin
      Align := alBottom;
      Parent := ScrollBox_Category;
      Name := 'Category_' + IntToSTr(i);
      Label_Value.Caption := arrStockCategoryInfo[i].sName;
      Font.Size := DM.LabelFontSize(Label_Value);

      if i <> High(arrStockCategoryInfo) then
        Padding.Bottom := 0;

      Hint := arrStockCategoryInfo[i].sCODE;
      Label_Value.Hint := Hint;
      Label_Value.ShowHint := True;

      Height := 50;
      Align := alTop;

      OnClick := FrameNavClick;
    end;
  end;

  SendMEssage(ScrollBox_Category.Handle, WM_SETREDRAW, 1, 0);
  RedrawWindow(ScrollBox_Category.Handle, nil, 0, RDW_ERASE or RDW_INVALIDATE or RDW_FRAME or RDW_ALLCHILDREN);
end;

procedure TForm_DATA1_1.ShowStockInfo(iWork: Integer);
var
  i, j, iMAX, iSEQ: Cardinal;
  DelCon: TControl;

  iW: Double;
  arrStock: array of Cardinal;
  iTotal: Cardinal;
  bEnd, bSearch: Boolean;
begin
  Label_Pageing.Caption := Label_Pageing.Hint + IntToSTr(iWork + 1);
  Timer_Refresh.Tag := iWork;
  iW := Panel_MenuInfo_Column.Width;

  Label_MenuCode.Width := Round(iW * 0.15);
  FrameCombo_Combo.Width := Round(iW * 0.25);
  FrameCombo_Edit.Width := Round(iW * 0.25);

  SendMEssage(ScrollBox_List.Handle, WM_SETREDRAW, 0, 0);
  try
    iTotal := 0;
    // 초기화
    if ScrollBox_List.ControlCount <> 0 then
    begin
      for i := ScrollBox_List.ControlCount - 1 Downto 0 do
      begin
        DelCon := ScrollBox_List.Controls[i];
        DelCon.Visible := False;
      end;
    end;

    if (sSearch_Category <> '') OR (Edit_Search.Text <> '') then
    begin
      bSearch := True;
      for i := Low(arrStockInfo) to High(arrStockInfo) do
      begin
        if (sSearch_Category = '') OR (arrStockInfo[i].sGubunCode = sSearch_Category) then
        begin
          // 검색어가 있을때,
          if (Edit_Search.Text <> '') then
          begin
            case FrameCombo_Search.Tag of
              SEARCH_NORMAL:
                begin
                  if (arrStockInfo[i].sStockCode = Edit_Search.Text) OR (Pos(Edit_Search.Text, arrStockInfo[i].sStockName) <> 0) then
                  begin
                    System.Insert(i, arrStock, Length(arrStock));
                  end;
                end;
              SEARCH_PRICE:
                begin
                  if arrStockInfo[i].iStockAMT = StrToIntDef(Edit_Search.Text, 00) then
                  begin
                    System.Insert(i, arrStock, Length(arrStock));
                  end;
                end;
            end;
          end
          // 분류만 검색
          else
          begin
            System.Insert(i, arrStock, Length(arrStock));
            inc(iTotal);
          end;
        end;
      end;
      iTotal := Length(arrStock);
    end
    else
    begin
      bSearch := False;
      iTotal := Length(arrStockInfo);
    end;

    // 처리
    j := (ScrollBox_List.Height - 3) div 41;
    iPage := iTotal div j;
    if iWork > iPage then
    begin
      iWork := iPage;
      Timer_Refresh.Tag := iWork;
    end;

    if Frac(iTotal / j) <> 0 then
      inc(iPage);
    bEnd := False;
    i := 0;
    if iTotal = 0 then
      Exit;

    repeat
      if NOT bSearch then
      begin
        iMAX := (iWork * j) + i;
        iSEQ := iMAX;
        inc(i);
      end
      else
      begin
        iMAX := (iWork * j) + i;
        iSEQ := arrStock[iMAX];
        inc(i);
      end;

      if bSearch then
        iW := Length(arrStockInfo);

      if (i - 1 = j) OR (iMAX >= Length(arrStockInfo)) OR (bSearch AND (iMAX >= Length(arrStock))) then
        bEnd := True
      else
        StockFrame('StockInfo_' + IntToSTr(i), iMAX, iSEQ);
      {
        if ((NOT bSearch) AND ((iWork * j) + i >= iTotal)) OR (bSearch AND ((iWork * j) + arrStock[i] >= iTotal)) OR (i >= j - 1) then
        bEnd := True;
      }
    until bEnd;

    for i := 0 to j - 1 do
    begin
      if ((iWork * j) + i) >= iTotal then
        Break;
    end;
  finally
    SendMEssage(ScrollBox_List.Handle, WM_SETREDRAW, 1, 0);
    RedrawWindow(ScrollBox_List.Handle, nil, 0, RDW_ERASE or RDW_INVALIDATE or RDW_FRAME or RDW_ALLCHILDREN);

    with Label_Info do
    begin
      Caption := '총 상품개수 : ' + IntToSTr(iTotal) + #13#10 + //
        '총 페이지수 : ' + IntToSTr(iPage) + #13#10 + //
        '페이지당 상품개수 : ' + IntToSTr(j);

    end;
  end;
end;

procedure TForm_DATA1_1.StockFrame(FrameName: String; FrameTag, FrameSEQ: Integer);
var
  FrameControl: TControl;
  i: Integer;
  iW: Double;
begin
  if FindComponent('StockInfo_' + IntToSTr(FrameSEQ)) <> nil then
    FrameControl := (FindComponent('StockInfo_' + IntToSTr(FrameSEQ)) as TFrameStockInfo)
  else
    FrameControl := TFrameStockInfo.Create(Self);

  with ((FrameControl as TFrameStockInfo)) do
  begin
    Parent := ScrollBox_List;
    Align := alBottom;
    Name := 'StockInfo_' + IntToSTr(FrameSEQ);
    Tag := FrameSEQ;

    iW := Panel_MenuInfo_Column.Width;

    Label_StockCode.Width := Round(iW * 0.15);
    Edit_Value.Width := Round(iW * 0.25);
    Edit_Value.Align := alLeft;
    FrmCombo_Value.Width := Round(iW * 0.25);

    Edit_Value.Align := alRight;

    with arrStockInfo[FrameSEQ] do
    begin
      if bCHk then
        Color := clSkyBlue
      else
        Color := clWhite;

      Label_StockCode.Caption := sStockCode;
      Label_StockCode.Font.Size := DM.LabelFontSize(Label_StockCode);
      Edit_StockName.Text := sStockName;

      Edit_StockName.OnChange := Frame_EditChange;
      Edit_Value.OnChange := Frame_EditChange;
      FrmCombo_Value.OnClick := Frame_ComboChange;

      Edit_Value.Tag := FrameCombo_Edit.Tag;
      Edit_Value.MaxLength := 0;
      case FrameCombo_Edit.Tag of
        EDIT_PRICE:
          begin
            Edit_Value.MaxLength := 8;
            Edit_Value.Text := IntToSTr(iStockAMT);
            Edit_Value.Alignment := taRightJustify;
          end;
        EDIT_NOTICE:
          begin
            Edit_Value.Text := sStandard;
            Edit_Value.Alignment := taLeftJustify;
          end;
        EDIT_TIME:
          begin
            Edit_Value.Text := sUnit;
            Edit_Value.Alignment := taRightJustify;
          end;
        EDIT_ADDPRICE:
          begin
            Edit_Value.Text := IntToSTr(iMaeipAMT);
            Edit_Value.Alignment := taRightJustify;
          end;
        EDIT_ADDTIME:
          begin
            Edit_Value.Text := IntToSTr(iNowMaeip);
            Edit_Value.Alignment := taRightJustify;
          end;
      end;

      FrmCombo_Value.Tag := FrameCombo_Combo.Tag;
      case FrameCombo_Combo.Tag of
        COMBO_KIT:
          begin
            if sKitPrn = '미전' then
              FrmCombo_Value.Label_Key.Tag := 0
            else
              FrmCombo_Value.Label_Key.Tag := StrToIntDef(sKitPrn, 0);

            if FrmCombo_Value.Label_Key.Tag <= High(arrStockKitPrn) then
              FrmCombo_Value.Label_Key.Caption := arrStockKitPrn[FrmCombo_Value.Label_Key.Tag]
            else
              FrmCombo_Value.Label_Key.Caption := arrStockKitPrn[Low(arrStockKitPrn)];
          end;
        COMBO_CATEGORY:
          begin
            FrmCombo_Value.Label_Key.Tag := 0;
            for i := Low(arrStockCategoryInfo) to High(arrStockCategoryInfo) do
            begin
              if arrStockCategoryInfo[i].sCODE = sGubunCode then
              begin
                FrmCombo_Value.Label_Key.Tag := i;
                Break;
              end;
            end;

            if FrmCombo_Value.Label_Key.Tag = 0 then
              FrmCombo_Value.Label_Key.Caption := '분류 미지정'
            else
              FrmCombo_Value.Label_Key.Caption := arrStockCategoryInfo[FrmCombo_Value.Label_Key.Tag].sName;
          end;
        COMBO_SET:
          begin
            FrmCombo_Value.Label_Key.Tag := 0;
            for i := Low(arrStockSet) to High(arrStockSet) do
            begin
              if arrStockSet[i].sCODE = sSETCODE then
              begin
                FrmCombo_Value.Label_Key.Tag := i;
                Break;
              end;
            end;
            if FrmCombo_Value.Label_Key.Tag = 0 then
              FrmCombo_Value.Label_Key.Caption := arrStockSet[Low(arrStockSet)].sSETNAME
            else
              FrmCombo_Value.Label_Key.Caption := arrStockSet[FrmCombo_Value.Label_Key.Tag].sSETNAME;
          end;
        COMBO_VAT:
          begin
            FrmCombo_Value.Label_Key.Caption := sVAT;
            for i := Low(arrStockType) to High(arrStockType) do
            begin
              if arrStockType[i] = sVAT then
              begin
                FrmCombo_Value.Label_Key.Tag := i;
                Break;
              end;
            end;
          end;
        COMBO_SPEC:
          FrmCombo_Value.Label_Key.Caption := '';
      end;
    end;

    Visible := True;
    Align := alTop;
  end;
end;

procedure TForm_DATA1_1.StockUpdate;
var
  arr1: array of TStock_Info;
  str1: STring;
  i: Cardinal;
begin
  //
  if (NoT DM.DBConnect) then
  begin
    DM.GetPopup('데이터가 연결되지 않아, 변경사항이 저장되지 않았습니다.');
    Exit;
  end;

  with DM.FDQ do
  begin
    try
      DM.DBSQLClear;
      SQL.Text := 'UPDATE HSTOCK SET ' + //
        'STOCKNAME = :STOCKNAME, ' + //
        'SALEAMT   = :SALEAMT, ' + //
        'GUBUNCODE = :GUBUNCODE, ' + //
        'KITPRN    = :KITPRN, ' + //
        'MAEIPAMT  = :MAEIPAMT, ' + //
        'STANDARD  = :STANDARD, ' + //
        'UNIT      = :UNIT, ' + //
        'VAT       = :VAT, ' + //
        'QTY       = :QTY, ' + //
        'SETCODE   = :SETCODE ' + //
        ' WHERE STOCKCODE = :STOCKCODE';
      Params.ArraySize := Length(arrStockInfo);

      for i := Low(arrStockInfo) to High(arrStockInfo) do
      begin

        with arrStockInfo[i] do
        begin

          ParamByName('STOCKNAME').AsStrings[i] := DM.AnsiFormat(sStockName);
          ParamByName('SALEAMT').AsIntegers[i] := iStockAMT;
          ParamByName('GUBUNCODE').AsStrings[i] := DM.AnsiFormat(sGubunCode);
          ParamByName('KITPRN').AsStrings[i] := DM.AnsiFormat(sKitPrn);
          ParamByName('MAEIPAMT').AsIntegers[i] := iMaeipAMT;
          ParamByName('STANDARD').AsStrings[i] := DM.AnsiFormat(sStandard);
          ParamByName('UNIT').AsStrings[i] := DM.AnsiFormat(sUnit);
          ParamByName('VAT').AsStrings[i] := DM.AnsiFormat(sVAT);
          ParamByName('QTY').AsIntegers[i] := iQTY;
          ParamByName('SETCODE').AsStrings[i] := DM.AnsiFormat(sSETCODE);

          ParamByName('STOCKCODE').AsStrings[i] := DM.AnsiFormat(sStockCode);
        end;
      end;

      Execute(Length(arrStockInfo), 0);
    finally
      DM.FDQ.CLose;
      DM.FDConn.Commit;
      DM.DBDisConnect;
    end;
  end;
end;

procedure TForm_DATA1_1.Timer_RefreshTimer(Sender: TObject);
begin
  Timer_Refresh.Enabled := False;
  if Sender is TButton then
    Timer_Refresh.Tag := 0;

  GroupBox_Category.Width := Round(Width * 0.2);
  ShowStockInfo(Timer_Refresh.Tag);
end;

{ TLabel }
{
  procedure TLabel.WMEraseBkgnd(var Message: TWmEraseBkgnd);
  begin
  Message.Result := 1;
  end;
}
end.
