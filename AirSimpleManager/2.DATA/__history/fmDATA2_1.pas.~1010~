unit fmDATA2_1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.StrUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Frame_Nav, Frame_ComboBox, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.WinXCtrls,
  Vcl.ComCtrls, System.ImageList, Vcl.ImgList;

type
  TListView = class(Vcl.ComCtrls.TListView)
  private
    procedure CNMeasureItem(var Message: TWMMeasureItem); message CN_MEASUREITEM;

  end;

  TForm_DATA2_1 = class(TForm)
    Label_Title: TLabel;
    Panel_Side: TPanel;
    Button_Execute: TButton;
    RadioGroup_EXE: TRadioGroup;
    CheckBox_Paging: TCheckBox;
    Panel_Body: TPanel;
    Panel_BackColor: TPanel;
    Shape_BackColor: TShape;
    Panel_FontColor: TPanel;
    Shape_FontColor: TShape;
    ListView_List: TListView;
    Panel_Menu: TPanel;
    Panel_Category: TPanel;
    ComboBox_Category: TComboBox;
    Button_DefaultColor_Font: TButton;
    Panel_MenuSearch: TPanel;
    Edit_Search: TEdit;
    ImageList_Menu: TImageList;
    Timer_Refrush: TTimer;
    Button_ViewCategory: TButton;
    Button_DefaultColor_Back: TButton;
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);

    procedure Button_ViewCategoryClick(Sender: TObject);
    procedure Button_DefaultColorClick(Sender: TObject);
    procedure Button_ExecuteClick(Sender: TObject);

    procedure Shape_FontColorMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure Timer_RefrushTimer(Sender: TObject);
    procedure CheckBox_PagingClick(Sender: TObject);
    procedure RadioGroup_EXEClick(Sender: TObject);
    procedure Panel_HelpClick(Sender: TObject);
    procedure Panel_SearchClick(Sender: TObject);
    procedure Edit_SearchKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
    procedure ShowCategorys; // 검색 상품분류
    procedure ShowStocks; // 검색 상품 리스트

    procedure ShowMenuCategorys(iPageNo: SmallInt); // 배치 분류
    procedure ShowMenu(iCategoryNo, iPageNo: SmallInt); // 배치 메뉴

    procedure CategoryPageClick(Sender: TObject);
    procedure CategoryClick(Sender: TObject);

    procedure MenuPageClick(Sender: TObject);
    procedure MenuClick(Sender: TObject);
  public
    { Public declarations }
  protected
    procedure FormResizeEND(var Message: TMessage); message WM_EXITSIZEMOVE;
  end;

const
  iExecute_SEL = 0; // 배치선택
  iExecute_INS = 1; // 배치추가
  iExecute_UPD = 2; // 배치교체
  iExecute_DEL = 3; // 배치삭제

var
  Form_DATA2_1: TForm_DATA2_1;
  iCategory_Page: Byte = 0;
  iSel_Category: Byte = 0;
  iMenu_Page: Byte = 0;

  bCollocate: Boolean = False;
  iCollocate: SmallInt = -1; // -1 미정, 0~999 : 배치그룹, 1000~65534 : 배치상품

implementation

{$R *.dfm}

uses uDM, fmStock;

procedure TForm_DATA2_1.FormShow(Sender: TObject);
begin
  iCategory_Page := 0;
  iMenu_Page := 0;

  if NOT(DM.GetStocks or DM.GetMenuCategros or DM.GetMenus) then
  begin
    DM.GetPopup('데이터를 가져오지 못했습니다||네트워크 상태를 확인해주세요.');
  end
  else
  begin
    ShowCategorys;
    ShowStocks;

    DM.GetMenuCategros;
    DM.GetMenus;

    RadioGroup_EXEClick(nil);
    Timer_Refrush.Enabled := True;
  end;
end;

procedure TForm_DATA2_1.FormClose(Sender: TObject; var Action: TCloseAction);
var
  i, j, k: Word;
  sDT: String;
begin
  //
  if NOT DM.DBConnect then
    Exit
  else
  begin
    try
      sDT := FormatDateTime('YYYYMMDD', NOW);
      with DM.FDQ do
      begin
        // 기존 데이터 삭제
        DM.DBSQLClear;
        SQL.Text := 'DELETE FROM HMENUGUBUN';
        ExecSQL;

        DM.DBSQLClear;
        SQL.Text := 'DELETE FROM HMENU';
        ExecSQL;

        // 분류 배치
        DM.DBSQLClear;
        SQL.Text :=
          'INSERT INTO HMENUGUBUN (ISEQ, GUBUNNM, INPUTDT, BACKCOLOR, FONTCOLOR) VALUES(:ISEQ, :GUBUNNM, :INPUTDT, :BACKCOLOR, :FONTCOLOR)';
        Params.ArraySize := 50;
        j := 0;
        for i := Low(arrMenuCategory) to High(arrMenuCategory) do
        begin
          with arrMenuCategory[i] do
          begin
            if sCategory_Name = '' then
              Continue
            else
            begin
              ParamByName('ISEQ').AsIntegers[j] := i + 1;
              ParamByName('GUBUNNM').AsStrings[j] := DM.AnsiFormat(sCategory_Name, 20);
              ParamByName('INPUTDT').AsStrings[j] := sDT;
              ParamByName('BACKCOLOR').AsStrings[j] := DM.ColorHex(sCategory_BackColor);
              ParamByName('FONTCOLOR').AsStrings[j] := DM.ColorHex(sCategory_FontColor);


              InputBox('','',DM.AnsiFormat(sCategory_Name, 20));

              inc(j);
            end;
          end;
        end;
        if j <> 0 then
          Execute(j, 0);

        // 메뉴 배치
        DM.DBSQLClear;
        SQL.Text := 'INSERT INTO HMENU(ISEQ, MENUNO, STOCKCODE, STOCKNAME, AMOUNT, INPUTDT, FONTCOLOR, BACKCOLOR) ' +
          'VALUES (:ISEQ, :MENUNO, :STOCKCODE, :STOCKNAME, :AMOUNT, :INPUTDT, :FONTCOLOR, :BACKCOLOR)';
        Params.ArraySize := iMENU_CATEGORY_MAX * iMENU_MAX;
        k := 0;
        for i := Low(arrMenu) to High(arrMenu) do
        begin
          for j := Low(arrMenu[i]) to High(arrMenu[i]) do
          begin
            with arrMenu[i, j] do
            begin
              if sMenu_CODE = '' then
                Continue
              else
              begin
                ParamByName('ISEQ').AsIntegers[k] := i + 1;
                ParamByName('MENUNO').AsIntegers[k] := j + 1;
                ParamByName('STOCKCODE').AsStrings[k] := DM.AnsiFormat(sMenu_CODE, 200);
                ParamByName('STOCKNAME').AsStrings[k] := DM.AnsiFormat(sMenu_Name, 50);
                ParamByName('AMOUNT').AsIntegers[k] := iMenu_AMT;
                ParamByName('INPUTDT').AsStrings[k] := sDT;
                ParamByName('FONTCOLOR').AsStrings[k] := DM.ColorHex(sMenu_FontColor);
                ParamByName('BACKCOLOR').AsStrings[k] := DM.ColorHex(sMenu_BackColor);
                inc(k);
              end;
            end;
          end;
        end;
        if k <> 0 then
          Execute(k, 0);
      end;
    finally
      DM.DBDisConnect;
    end;
  end;
end;

procedure TForm_DATA2_1.FormResizeEND(var Message: TMessage);
begin
  Timer_Refrush.Enabled := True;
end;

procedure TForm_DATA2_1.Button_ViewCategoryClick(Sender: TObject);
begin
  Panel_Side.Visible := NOT Panel_Side.Visible;
  Timer_Refrush.Enabled := True;
end;

procedure TForm_DATA2_1.CategoryPageClick(Sender: TObject);
begin
  iCategory_Page := iCategory_Page + (Sender as TButton).Tag;
  if iCategory_Page >= 255 then
  begin
    iCategory_Page := 0;
    DM.GetPopup('첫 페이지입니다.');
  end
  else if iCategory_Page > High(arrMenuCategory) div 9 - 1 then
  begin
    iCategory_Page := High(arrMenuCategory) div 9 - 1;
    DM.GetPopup('마지막 페이지입니다.');
  end;
  ShowMenuCategorys(iCategory_Page);
end;

procedure TForm_DATA2_1.CategoryClick(Sender: TObject);
var
  iTag: Integer;
  i, j: Word;
  Res, Res2: TResult_IS;
  arrRes: array of String;

  bSave: Boolean;
  ArrCollocate: TMenu_Category;
  ArrCollocateMenu: array of TMenu_Info;
begin
  //

  iTag := (Sender as TPanel).Tag;
  bSave := False;
  iMenu_Page := 0;
  case RadioGroup_EXE.ItemIndex of
    iExecute_INS: // 배치 등록
      begin
        Res := DM.GetPopup(1, '상품분류 중에서 선택용하시겠습니까?');
        if Res.Result_int = 1 then
        begin
          if Length(arrStockCategoryInfo) = 1 then
          begin
            DM.GetPopup('등록된 상품분류가 없습니다.||먼저 상품분류를 등록해주세요.');
            Exit;
          end;

          for i := Low(arrStockCategoryInfo) + 1 to High(arrStockCategoryInfo) do
            System.Insert(arrStockCategoryInfo[i].sName, arrRes, Length(arrRes));

          Res2 := DM.GetList('등록하실 배치분류를 선택해주세요.', arrRes);
          if Res2.Result_int <> -99 then
          begin
            arrMenuCategory[iTag].sCategory_Name := arrStockCategoryInfo[Res2.Result_int + 1].sName;
            bSave := True;
          end;
        end
        else
        begin
          Res2.Result_Str := InputBox('배치분류명을 입력해주세요.', '배치분류명 : ', arrMenuCategory[iTag].sCategory_Name);
          if Res2.Result_Str <> '' then
          begin
            arrMenuCategory[iTag].sCategory_Name := Res2.Result_Str;
            bSave := True;
          end;
        end;

        if bSave then
        begin
          with (Sender as TPanel), arrMenuCategory[iTag] do
          begin
            Color := Shape_BackColor.Brush.Color;
            Font.Color := Shape_FontColor.Brush.Color;

            sCategory_BackColor := ColorToString(Color);
            sCategory_FontColor := ColorToString(Font.Color);
            ShowMenuCategorys(iCategory_Page);
          end;
        end;
      end;
    iExecute_UPD: // 배치 순번or색상 변경
      begin
        if bCollocate then
        begin
          if iCollocate = -1 then
          begin
            iCollocate := iTag;
            with (Sender as TPanel) do
            begin
              Color := clLime;
              Font.Color := clBlack;
            end;
          end
          else if (iCollocate <= 999) AND (iCollocate <> iTag) then
          begin
            ArrCollocate := arrMenuCategory[iTag];
            arrMenuCategory[iTag] := arrMenuCategory[iCollocate];
            arrMenuCategory[iCollocate] := ArrCollocate;

            if DM.GetPopup(1, '해당 분류의 상품배치도 함께 옮기시겠습니까?').Result_int = 1 then
            begin
              for i := Low(arrMenu[iTag]) to High(arrMenu[iTag]) do
              begin
                System.Insert(arrMenu[iTag, i], ArrCollocateMenu, Length(ArrCollocateMenu));
                arrMenu[iTag, i] := arrMenu[iCollocate, i];
                arrMenu[iCollocate, i] := ArrCollocateMenu[i];
              end;
            end;
            iCollocate := -1;
            ShowMenuCategorys(iCategory_Page);
          end;

        end
        else
        begin
          with (Sender as TPanel) do
          begin
            Color := Shape_BackColor.Brush.Color;
            Font.Color := Shape_FontColor.Brush.Color;

            with arrMenuCategory[iTag] do
            begin
              sCategory_BackColor := ColorToString(Color);
              sCategory_FontColor := ColorToString(Font.Color);
            end;
          end;
        end;

      end;
    iExecute_DEL: // 배치 삭제
      begin
        with arrMenuCategory[iTag] do
        begin
          sCategory_Name := '';
          sCategory_BackColor := '';
          sCategory_FontColor := '';
        end;

        with (Sender as TPanel) do
        begin
          Caption := '';
          Color := clWhite;
          Font.Color := clBlack;
        end;

        if DM.GetPopup(1, '해당 분류에 배치되있던 배치상품도 같이 삭제하시겠습니까?').Result_int = 1 then
        begin
          for i := Low(arrMenu[iTag]) to High(arrMenu[iTag]) do
          begin
            with arrMenu[iTag, i] do
            begin
              sMenu_CODE := '';
              sMenu_Name := '';
              iMenu_AMT := 0;
              sMenu_BackColor := '';
              sMenu_FontColor := '';
            end;
          end;
        end;
      end;
  end;

  ShowMenu(iTag, iMenu_Page);
end;

procedure TForm_DATA2_1.MenuPageClick(Sender: TObject);
begin

  iMenu_Page := iMenu_Page + (Sender as TButton).Tag;
  if iMenu_Page >= 255 then
  begin
    iMenu_Page := 0;
    DM.GetPopup('첫 페이지입니다.');
  end
  else if iMenu_Page > (iMENU_MAX div 25) - 1 then
  begin
    iMenu_Page := (iMENU_MAX div 25) - 1;
    DM.GetPopup('마지막 페이지입니다.');
  end;
  ShowMenu(iSel_Category, iMenu_Page);
end;

procedure TForm_DATA2_1.Panel_HelpClick(Sender: TObject);
var
  sl: TStringList;
begin
  sl := TStringList.Create;
  try
    sl.Add('선택 : 배치된 부분은 선택,');

  finally
    sl.Free;
  end;
end;

procedure TForm_DATA2_1.Panel_SearchClick(Sender: TObject);
begin
  ShowStocks;
end;

procedure TForm_DATA2_1.RadioGroup_EXEClick(Sender: TObject);
begin
  bCollocate := False;
  ListView_List.ItemIndex := -1;
  with Button_Execute do
  begin
    Enabled := True;
  end;

  case RadioGroup_EXE.ItemIndex of
    iExecute_SEL, iExecute_INS:
      begin
        with Button_Execute do
        begin
          Caption := '분류별 자동배치';
        end;
      end;
    iExecute_DEL:
      begin
        with Button_Execute do
        begin
          Caption := '메뉴배치 전체삭제';
        end;
      end;
    iExecute_UPD:
      begin
        with Button_Execute do
        begin
          Caption := '배치정보 순번변경';
        end;
      end
  else
    begin
      with Button_Execute do
      begin
        Enabled := False;
        Caption := '작업유형을 선택해주세요.';
      end;
    end;
  end;
end;

procedure TForm_DATA2_1.MenuClick(Sender: TObject);
var
  iTag: Integer;
  Res: TResult_IS;
  ArrCollocate: TMenu_Info;

  iX, iY: SmallInt;
  i: Word;
begin
  //
  iTag := (Sender as TFrame_ENV_Nav).Tag;
  case RadioGroup_EXE.ItemIndex of
    iExecute_INS:
      begin
        if ListView_List.ItemIndex < 0 then
        begin
          Res := DM.GetPopup(1, '상품을 새로 등록후 배치하시겠습니까?');
          if Res.Result_int = 1 then
          begin
            Form_Stock := TForm_Stock.Create(Self);
            try
              with Form_Stock do
              begin
                ShowModal;
                case ModalResult of
                  mrOk:
                    begin
                      DM.GetStocks;
                      for i := Low(arrStockInfo) to High(arrStockInfo) do
                      begin
                        if arrStockInfo[i].sStockCode = sNewCODE then
                          Break;
                      end;

                      with arrMenu[iSel_Category, iTag], arrStockInfo[i] do
                      begin
                        sMenu_CODE := sStockCode;
                        sMenu_Name := sStockName;
                        iMenu_AMT := iStockAMT;

                        with (Sender as TFrame_ENV_Nav).Label_Value do
                        begin
                          Color := Shape_BackColor.Brush.Color;
                          Font.Color := Shape_FontColor.Brush.Color;

                          sMenu_BackColor := ColorToString(Color);
                          sMenu_FontColor := ColorToString(Font.Color);
                        end;
                      end;
                    end;
                end;
              end;
            finally
              FreeAndNil(Form_Stock);
            end;
          end
          else
          begin
            DM.GetPopup('왼쪽 상품목록에서 상품을 선택하신 후 진행해주세요.');
            Exit;
          end;
        end
        else
        begin
          with arrMenu[iSel_Category, iTag], arrStockInfo[StrToIntDef(ListView_List.Selected.SubItems[1], 0)] do
          begin
            sMenu_CODE := sStockCode;
            sMenu_Name := sStockName;
            iMenu_AMT := iStockAMT;

            with (Sender as TFrame_ENV_Nav).Label_Value do
            begin
              Color := Shape_BackColor.Brush.Color;
              Font.Color := Shape_FontColor.Brush.Color;

              sMenu_BackColor := ColorToString(Color);
              sMenu_FontColor := ColorToString(Font.Color);
            end;
          end;

        end;
        ShowMenu(iSel_Category, iMenu_Page);
      end;
    iExecute_UPD:
      begin
        if bCollocate then
        begin
          if iCollocate = -1 then
          begin
            iCollocate := (iSel_Category + 1) * 1000 + iTag;
            with (Sender as TFrame_ENV_Nav).Label_Value do
            begin
              Color := clLime;
              Font.Color := clBlack;
            end;
          end
          else if (iCollocate > 999) AND (iCollocate <> (iSel_Category + 1) * 1000 + iTag) then
          begin
            iX := iCollocate div 1000 - 1;
            iY := iCollocate Mod 1000;

            ArrCollocate := arrMenu[iX, iY];
            arrMenu[iX, iY] := arrMenu[iSel_Category, iTag];
            arrMenu[iSel_Category, iTag] := ArrCollocate;

            ShowMenu(iSel_Category, iMenu_Page);
            iCollocate := -1;
          end;
        end
        else
        begin
          with (Sender as TFrame_ENV_Nav).Label_Value, arrMenu[iSel_Category, iTag] do
          begin
            Color := Shape_BackColor.Brush.Color;
            Font.Color := Shape_FontColor.Brush.Color;
            sMenu_BackColor := ColorToString(Color);
            sMenu_FontColor := ColorToString(Font.Color);
          end;
        end;

      end;
    iExecute_DEL:
      begin
        with (Sender as TFrame_ENV_Nav).Label_Value, arrMenu[iSel_Category, iTag] do
        begin
          Caption := '';
          Color := clWhite;
          Font.Color := clBlack;

          sMenu_CODE := '';
          sMenu_Name := '';
          iMenu_AMT := 0;
          sMenu_BackColor := ColorToString(Color);
          sMenu_FontColor := ColorToString(Font.Color);
        end;
      end;
  end;
end;

procedure TForm_DATA2_1.CheckBox_PagingClick(Sender: TObject);
begin
  ShowMenu(iCategory_Page, iMenu_Page);
end;

procedure TForm_DATA2_1.Edit_SearchKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
    Panel_SearchClick(Edit_Search);
end;

procedure TForm_DATA2_1.Button_DefaultColorClick(Sender: TObject);
begin
  with (Sender as TButton) do
  begin
    case Tag of
      0:
        Shape_FontColor.Brush.Color := Font.Color;
      1:
        Shape_BackColor.Brush.Color := Font.Color;
    end;
  end;
end;

procedure TForm_DATA2_1.Button_ExecuteClick(Sender: TObject);
var
  Res: TResult_IS;
  i, j, k, l: Word;
  iMAX: Byte;

  bRefrush: Boolean;

  stt: String;
begin
  bRefrush := False;
  case RadioGroup_EXE.ItemIndex of
    iExecute_SEL, iExecute_INS: // 배치
      begin
        Res := DM.GetPopup(1, '분류별 자동배치를 사용하시겠습니까?||||기존 배치정보가 변경됩니다..');
        if Res.Result_int = 1 then
        begin
          bRefrush := True;
          // 작업 전  초기화
          for i := Low(arrMenuCategory) to High(arrMenuCategory) do
          begin
            with arrMenuCategory[i] do
            begin
              sCategory_Name := '';
              sCategory_BackColor := ColorToString(clWhite);
              sCategory_FontColor := ColorToString(clBlack);
            end;
          end;

          for i := Low(arrMenu) to High(arrMenu) do
          begin
            for j := Low(arrMenu[i]) to High(arrMenu[i]) do
            begin
              with arrMenu[i, j] do
              begin
                sMenu_CODE := '';
                sMenu_Name := '';
                iMenu_AMT := 0;
                sMenu_BackColor := ColorToString(clWhite);;
                sMenu_FontColor := ColorToString(clBlack);
              end;
            end;
          end;

          // 배치분류
          for i := Low(arrMenuCategory) + 1 to High(arrMenuCategory) do
          begin

            with arrMenuCategory[i - 1] do
            begin
              if (i <= High(arrStockCategoryInfo)) AND (arrStockCategoryInfo[i].sName <> '') then
              begin
                sCategory_Name := arrStockCategoryInfo[i].sName;
                sCategory_BackColor := ColorToString($00424242);
                sCategory_FontColor := ColorToString(clWhite);
              end
              else
                sCategory_Name := '';
            end;
          end;

          try
            // 배치메뉴 최대사이즈
            if useTimeSale then
              iMAX := 14 // 5 X 3
            else
              iMAX := 24; // 5 X 5

            for i := Low(arrMenu) to High(arrMenu) do
            begin
              if (i > High(arrStockCategoryInfo) - 1) then
                Break;

              k := 0;
              l := 0;
              for j := High(arrStockInfo) Downto Low(arrStockInfo) do
              begin
                if i = High(arrMenuCategory) then
                  stt := '1';

                if arrStockInfo[j].sGubunCode = arrStockCategoryInfo[i + 1].sCODE then
                begin
                  if (k mod 25 = iMAX) AND (CheckBox_Paging.Checked) then
                    inc(k);

                  if k >= iMENU_MAX then
                    Break;

                  if k mod 25 > iMAX then
                  begin
                    repeat
                      inc(k);
                    until k mod 25 <= iMAX;
                  end;

                  with arrMenu[i, k] do
                  begin
                    sMenu_CODE := arrStockInfo[j].sStockCode;
                    sMenu_Name := arrStockInfo[j].sStockName;
                    iMenu_AMT := arrStockInfo[j].iStockAMT;
                    inc(k);
                  end;
                end;
              end;
            end;
          except
            On E: Exception do
            begin
{$IFDEF DEBUG}
              ShowMEssage(arrStockInfo[j].sStockCode + Chr(13) + arrStockInfo[j].sStockName + E.Message);
{$ENDIF}
              ShowMEssage(iNTtOsTR(i) + ' ' + iNTtOsTR(j) + '  ' + iNTtOsTR(k) + '  ' + iNTtOsTR(l));
            end;
          end;

        end;
      end;
    iExecute_UPD: // 순번 변경
      begin
        iCollocate := -1;
        if bCollocate then
        begin
          (Sender as TButton).Caption := '배치정보 순번변경';
          bCollocate := False;
        end
        else
        begin
          (Sender as TButton).Caption := '배치정보 변경중...';
          bCollocate := True;
        end;
      end;

    iExecute_DEL: // 배치 일괄 삭제
      begin
        Res := DM.GetPopup(1, '배치정보 전체삭제를 하시겠습니까?||||기존 배치정보가 삭제됩니다..');
        if Res.Result_int = 1 then
        begin
          bRefrush := True;
          for i := Low(arrMenuCategory) to High(arrMenuCategory) do
          begin
            with arrMenuCategory[i] do
            begin
              sCategory_Name := '';
              sCategory_BackColor := ColorToString(clWhite);
              sCategory_FontColor := ColorToString(clBlack);
            end;
          end;

          for i := Low(arrMenu) to High(arrMenu) do
          begin
            for j := Low(arrMenu[i]) to High(arrMenu[i]) do
            begin
              with arrMenu[i, j] do
              begin
                sMenu_CODE := '';
                sMenu_Name := '';
                iMenu_AMT := 0;
                sMenu_BackColor := ColorToString(clWhite);;
                sMenu_FontColor := ColorToString(clBlack);
              end;
            end;
          end;
        end;

      end;
  end;
  if bRefrush then
    Timer_Refrush.Enabled := True;
end;

procedure TForm_DATA2_1.ShowMenuCategorys(iPageNo: SmallInt);
const
  TYPE_PAGEBUTTON = 0;
var
  i, j, iVal: SmallInt;
  iW, iH, iL, iT: Integer;
  CategoryPanel: TComponent;

  Label_F: TLabel;
begin
  // 카테고리 조회
  SendMEssage(Panel_Category.Handle, WM_SETREDRAW, 0, 0);
  with Panel_Category do
  begin
    iW := Round((Width - 5) / 5) - 5;
    iH := Round((Height - 5) / 2) - 5;

    Label_F := TLabel.Create(Self);
    WITH Label_F DO
    BEGIN
      Parent := Panel_Category;
      Visible := False;
      AutoSize := False;
      WordWrap := False;
      SetBounds(0, 0, iW, iH);
    END;

    for i := 0 to 9 do
    begin
      iT := (i div 5) * (iH + 5) + 5;
      iL := (i mod 5) * (iW + 5) + 5;

      if i <> 0 then
      begin
        iVal := (iPageNo * 9) + i - 1;
      end;

      CategoryPanel := Self.FindComponent('Panel_Category' + iNTtOsTR(i));
      if CategoryPanel = nil then
        CategoryPanel := TPanel.Create(Self);

      with (CategoryPanel as TPanel) do
      begin
        Parent := Panel_Category;
        ParentBackground := False;
        ParentColor := False;
        BevelOuter := bvNone;
        Name := 'Panel_Category' + iNTtOsTR(i);
        Tag := iVal;
        Hint := iNTtOsTR(i);

        SetBounds(iL, iT, iW, iH);
        case i of
          TYPE_PAGEBUTTON: // 배치 페이징 버튼
            begin
              for j := 0 to 1 do
              begin
                Caption := iNTtOsTR(iCategory_Page + 1);
                if (i = 0) AND (Self.FindComponent('Button_CategoryPage_' + iNTtOsTR(j)) <> nil) then
                begin
                  with (Self.FindComponent('Button_CategoryPage_' + iNTtOsTR(j)) as TButton) do
                  begin
                    Width := iW div 3;
                  end;
                end
                else
                begin
                  with TButton.Create(Self) do
                  begin
                    Parent := (CategoryPanel as TPanel);
                    Name := 'Button_CategoryPage_' + iNTtOsTR(j);
                    case j of
                      0:
                        begin
                          Align := alLeft;
                          Tag := -1;
                          Caption := '◀';
                        end;
                      1:
                        begin
                          Align := alRight;
                          Tag := 1;
                          Caption := '▶';
                        end;
                    end;
                    Width := iW div 3;
                    onClick := CategoryPageClick;
                  end;
                end;

              end;
            end;
        else // 배치 분류
          begin
            if (iVal <= iMENU_CATEGORY_MAX) AND (arrMenuCategory[iVal].sCategory_Name <> '') then
            begin

              with arrMenuCategory[iVal] do
              begin
                Label_F.Caption := sCategory_Name;
                Font.Size := DM.LabelFontSize(Label_F);

                Caption := sCategory_Name;
                Color := StringToColor(sCategory_BackColor);
                Font.Color := StringToColor(sCategory_FontColor);

                Visible := True;
              end;
            end
            else
            begin
              Caption := '';;
              Color := clWhite;
              Font.Color := clBlack;
            end;

            onClick := CategoryClick;
          end;
        end;
      end;
    end;
  end;
  SendMEssage(Panel_Category.Handle, WM_SETREDRAW, 1, 0);
  RedrawWindow(Panel_Category.Handle, nil, 0, RDW_ERASE or RDW_INVALIDATE or RDW_FRAME or RDW_ALLCHILDREN);
  FreeAndNil(Label_F);
end;

procedure TForm_DATA2_1.Shape_FontColorMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  if DM.ColorDialog1.Execute then
  begin
    (Sender as TShape).Brush.Color := DM.ColorDialog1.Color;
  end;
end;

procedure TForm_DATA2_1.ShowCategorys;
var
  i: Integer;
begin
  for i := Low(arrStockCategoryInfo) to High(arrStockCategoryInfo) do
    ComboBox_Category.Items.Add(arrStockCategoryInfo[i].sName);
  ComboBox_Category.ItemIndex := 0;
end;

procedure TForm_DATA2_1.ShowMenu(iCategoryNo, iPageNo: SmallInt);
var
  i, j, iMAX, iVal: SmallInt;
  sLine: String;
  iL, iT, iW, iH: Integer;
  MenuPanel: TComponent;
begin
  // 메뉴 조회
  iSel_Category := iCategoryNo;
  SendMEssage(Panel_Menu.Handle, WM_SETREDRAW, 0, 0);
  if useTimeSale then
  begin
    iW := Round(Panel_Menu.Width / 5);
    iH := Round(Panel_Menu.Height / 3);
    iMAX := 14;
  end
  else
  begin
    iW := Round(Panel_Menu.Width / 5);
    iH := Round(Panel_Menu.Height / 5);
    iMAX := 24;
  end;
  with Panel_Menu do
  begin
    for i := 0 to iMAX do
    begin
      if useTimeSale then
      begin
        iT := i div 5 * iH;
        iL := i mod 5 * iW;
      end
      else
      begin

        iT := i div 5 * iH;
        iL := i mod 5 * iW;
      end;

      iVal := (iPageNo * 25) + i;
      MenuPanel := Self.FindComponent('FrameNAV_MENU' + iNTtOsTR(i));
      if MenuPanel = nil then
        MenuPanel := TFrame_ENV_Nav.Create(Self);

      with (MenuPanel as TFrame_ENV_Nav) do
      begin
        Parent := Panel_Menu;
        ParentBackground := False;
        ParentFont := False;

        Name := 'FrameNAV_MENU' + iNTtOsTR(i);
        Tag := iVal;
        Hint := iNTtOsTR(i);
        SetBounds(iL, iT, iW - 5, iH);

        if CheckBox_Paging.Checked AND (i >= iMAX) then
        begin
          Label_Value.Caption := iNTtOsTR(iPageNo + 1);
          for j := 0 to 1 do
          begin
            if (Self.FindComponent('Button_MenuPage_' + iNTtOsTR(j)) <> nil) then
            begin
              with (Self.FindComponent('Button_MenuPage_' + iNTtOsTR(j)) as TButton) do
              begin
                Visible := True;
                case j of
                  0:
                    SetBounds(iL, iT, iW div 3, iH);
                  1:

                    SetBounds(iL + (iW div 3 * 2), iT, iW div 3, iH);
                end;
              end;
            end
            else
            begin
              with TButton.Create(Self) do
              begin
                Parent := Panel_Menu;
                Name := 'Button_MenuPage_' + iNTtOsTR(j);

                case j of
                  0:
                    begin
                      Tag := -1;
                      Caption := '◀';
                      SetBounds(iL, iT, iW div 3, iH);
                    end;
                  1:
                    begin
                      Tag := 1;
                      Caption := '▶';
                      SetBounds(iL + (iW div 3 * 2), iT, iW div 3, iH);
                    end;
                end;
                onClick := MenuPageClick;
              end;
            end;
          end;
        end
        else if (iVal < iMENU_MAX) AND (arrMenu[iCategoryNo, iVal].sMenu_CODE <> '') then
        begin
          with arrMenu[iCategoryNo, iVal], Label_Value do
          begin
            Caption := StringReplace(sMenu_Name, '  ', #13#10, [rfReplaceAll]);
            if Pos(#13#10, Caption) = 0 then
              sLine := DupeString(#13#10, 2)
            else
              sLine := DupeString(#13#10, 1);

            Caption := Caption + sLine + FormatFloat('##,###,##0', iMenu_AMT);
            Font.Color := StringToColor(sMenu_FontColor);
            Color := StringToColor(sMenu_BackColor);
          end;
          Font.Size := DM.LabelFontSize(Label_Value);
        end
        else
        begin
          with Label_Value do
          begin
            Caption := '';
            Font.Color := clBlack;
            Color := clWhite;
          end;
        end;
        onClick := MenuClick;
        SetBounds(iL, iT, iW, iH);

        if (NOT CheckBox_Paging.Checked) AND (i >= iMAX) then
        begin
          for j := 0 to 1 do
            if (Self.FindComponent('Button_MenuPage_' + iNTtOsTR(j)) <> nil) then
              with (Self.FindComponent('Button_MenuPage_' + iNTtOsTR(j)) as TButton) do
                Visible := False;
        end
      end;
    end;
  end;

  SendMEssage(Panel_Menu.Handle, WM_SETREDRAW, 1, 0);
  RedrawWindow(Panel_Menu.Handle, nil, 0, RDW_ERASE or RDW_INVALIDATE or RDW_FRAME or RDW_ALLCHILDREN);
end;

procedure TForm_DATA2_1.ShowStocks;
var
  i: Cardinal;
  listItem: TListItem;
begin
  //
  ListView_List.Clear;
  for i := Low(arrStockInfo) to High(arrStockInfo) do
  begin
    with arrStockInfo[i] do
    begin
      if (ComboBox_Category.ItemIndex > 0) AND (sGubunCode <> arrStockCategoryInfo[ComboBox_Category.ItemIndex].sCODE) then
        Continue;

      if (Trim(Edit_Search.Text) <> '') AND ((Pos(Edit_Search.Text, sStockName) = 0) OR (Edit_Search.Text = sStockCode)) then
        Continue;

      listItem := ListView_List.Items.Add;
      with listItem do
      begin
        Caption := sStockName;
        SubItems.Add(FormatFloat('##,###,##0', iStockAMT));
        SubItems.Add(iNTtOsTR(i));
      end;
    end;
  end;
end;

procedure TForm_DATA2_1.Timer_RefrushTimer(Sender: TObject);
begin
  Timer_Refrush.Enabled := False;
  ShowMenuCategorys(iCategory_Page);
  ShowMenu(iCategory_Page, iMenu_Page);
end;

{ TListView }

procedure TListView.CNMeasureItem(var Message: TWMMeasureItem);
begin
  inherited;
  inc(Message.MeasureItemStruct.itemHeight, 50);
end;

end.
