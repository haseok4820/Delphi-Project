unit fmSet;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, ImagingComponents, Vcl.ExtCtrls, Frame_Edit;

type
  TForm_Set = class(TForm)
    Panel_Header: TPanel;
    Image_Cancel: TImage;
    Panel_footer: TPanel;
    Button_Keyboard: TButton;
    Button_OK: TButton;
    Panel_Body: TPanel;
    Panel_CodeType: TPanel;
    FrameEdit_Code: TFrame_ENV_Edit;
    Button_CodeChk: TButton;
    FrameEdit_Name: TFrame_ENV_Edit;
    RadioGroup_SetType: TRadioGroup;
    FrameEdit_Cnt: TFrame_ENV_Edit;
    Button_Down: TButton;
    Button_UP: TButton;
    Button_Drop: TButton;
    procedure Button_KeyboardClick(Sender: TObject);
    procedure Button_CodeChkClick(Sender: TObject);
    procedure Button_QtyClick(Sender: TObject);
    procedure Button_OKClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Image_CancelClick(Sender: TObject);
    procedure Button_DropClick(Sender: TObject);
    procedure Panel_HeaderMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form_Set: TForm_Set;
  sCODE, sName, sDateTime: String;
  iCnt, iSetType: Integer;

implementation

{$R *.dfm}

uses uDM;

procedure TForm_Set.Button_KeyboardClick(Sender: TObject);
begin
  DM.TouchKeyBoard;
end;

procedure TForm_Set.Button_CodeChkClick(Sender: TObject);
begin
  sCODE := FrameEdit_Code.Edit_Value.Text;
  if DM.DBCodeChk('HSET', 'SETCODE', sCODE) then
  begin
    DM.GetPopup('이미 사용중인 코드입니다.||다른 코드로 변경해주세요.');
    FrameEdit_Code.Edit_Value.SetFocus;
    Exit;
  end
  else
    DM.GetPopup('사용 가능한 코드입니다.');
end;

procedure TForm_Set.Button_DropClick(Sender: TObject);
var
  iTag: Integer;
begin
  if DM.GetPopup(1, '해당 세트를 삭제하시겠습니까?||삭제후에는 복구가 불가합니다.').Result_int <> 1 then
    Exit;

  if NOT DM.DBConnect then
    Exit
  else
  begin
    sCODE := FrameEdit_Code.Edit_Value.Text;
    iTag := Tag;
    DM.DBSQLClear;
    with DM.FDQ do
    begin
      SQL.Text := 'DELETE FROM HSET WHERE SETCODE = :SETCODE';
      ParamByName('SETCODE').AsString := sCODE;

      ExecSQL;
    end;
    DELETE(arrStockSet, iTag, 1);
    ModalResult := mrOk;
  end;
end;

procedure TForm_Set.Button_OKClick(Sender: TObject);
begin
  if NOT DM.DBConnect then
    Exit
  else
  begin
    sCODE := FrameEdit_Code.Edit_Value.Text;
    sName := FrameEdit_Name.Edit_Value.Text;
    iCnt := StrToIntDef(FrameEdit_Cnt.Edit_Value.Text, 0);
    iSetType := RadioGroup_SetType.ItemIndex + 1;
    sDateTime := FormatDateTime('YYYYMMDDHHMMSS', NOW);

    case Tag of
      0: // 세트 등록
        begin
          if DM.DBCodeChk('HSET', 'SETCODE', sCODE) then
          begin
            DM.GetPopup('이미 사용중인 코드입니다.||다른 코드로 변경해주세요.');
            FrameEdit_Code.Edit_Value.SetFocus;
            Exit;
          end
          else if DM.KorCheck(FrameEdit_Code.Edit_Value.Text) then
            DM.GetPopup('세트코드는 한글을 포함할 수 없습니다.||다른 코드로 변경해주세요.')
          else if Trim(sName) = '' then
          begin
            DM.GetPopup('세트이름을 입력해주세요.');
            FrameEdit_Name.Edit_Value.SetFocus;
            Exit;
          end
          else
          begin
            DM.DBSQLClear;
            with DM.FDQ do
            begin
              SQL.Text := 'INSERT INTO HSET (SETCODE, SETNAME, GUBUN, CNT, UPDT) VALUES(:CODE, :NAME, :GUBUN, :CNT, :UPDT)';
              ParamByName('CODE').AsString := sCODE;
              ParamByName('NAME').AsString := DM.AnsiFormat(sName);
              ParamByName('GUBUN').AsInteger := iSetType;
              ParamByName('CNT').AsInteger := iCnt;
              ParamByName('UPDT').AsInteger := sDateTime;

              ExecSQL;
            end;
            ModalResult := mrOk;
          end;
        end;
      1: // 세트 수정
        begin
          if Trim(sName) = '' then
          begin
            DM.GetPopup('세트이름을 입력해주세요.');
            FrameEdit_Name.Edit_Value.SetFocus;
            Exit;
          end
          else
          begin
            DM.DBSQLClear;
            with DM.FDQ do
            begin
              SQL.Text := 'INSERT INTO HSET (SETCODE, SETNAME, GUBUN, CNT, UPDT) VALUES(:CODE, :NAME, :GUBUN, :CNT, :UPDT)';
              ParamByName('CODE').AsString := sCODE;
              ParamByName('NAME').AsString := DM.AnsiFormat(sName);
              ParamByName('GUBUN').AsInteger := iSetType;
              ParamByName('CNT').AsInteger := iCnt;
              ParamByName('UPDT').AsInteger := sDateTime;

              ExecSQL;
            end;
            ModalResult := mrOk;
          end;
        end;

    end;

  end;

  procedure TForm_Set.Button_QtyClick(Sender: TObject);
  var
    iQty: Integer;
  begin
    iQty := StrToIntDef(FrameEdit_Cnt.Edit_Value.Text, 0);
    if Sender is TButton then
      iQty := iQty + (Sender as TButton).Tag;

    if iQty > 10 then
      iQty := 10
    else if iQty < 0 then
      iQty := 0
    else
      FrameEdit_Cnt.Edit_Value.Text := IntToStr(iQty);
  end;

  procedure TForm_Set.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  begin
    if Key = 27 then
      Image_CancelClick(Image_Cancel)
    else if (Shift = [ssCtrl]) AND (Key = 13) then
      Button_OKClick(Button_OK);
  end;

  procedure TForm_Set.FormShow(Sender: TObject);
  begin
    SetWindowPos(Self.Handle, HWND_TOPMOST, Left, Top, Width, Height, 0);
    case Tag of
      0:
        FrameEdit_Code.Edit_Value.SetFocus;
      1:
        FrameEdit_Name.Edit_Value.SetFocus;
    end;
  end;

  procedure TForm_Set.Image_CancelClick(Sender: TObject);
  begin
    ModalResult := mrCancel;
  end;

  procedure TForm_Set.Panel_HeaderMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  begin
    ReleaseCapture;
    SendMessage(Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
  end;

end.
