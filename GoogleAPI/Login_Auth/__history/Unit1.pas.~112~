unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, IdBaseComponent, IdComponent, IdCustomTCPServer,
  IdCustomHTTPServer, IdHTTPServer, IdContext, Winapi.ShellApi, IPPeerClient, Data.Bind.Components,
  Data.Bind.ObjectScope, REST.Client, REST.Authenticator.OAuth, Vcl.ExtCtrls, IdTCPConnection, IdTCPClient, IdHTTP,
  System.Net.URLClient, System.Net.HttpClient, System.Net.HttpClientComponent, IdGlobal;

type
  TForm1 = class(TForm)
    IdHTTPServer1: TIdHTTPServer;
    RESTClient1: TRESTClient;
    RESTRequest1: TRESTRequest;
    RESTResponse1: TRESTResponse;
    OAuth2Authenticator1: TOAuth2Authenticator;
    Panel_Left: TPanel;
    Button_Login: TButton;
    Memo1: TMemo;
    NetHTTPRequest1: TNetHTTPRequest;
    Memo_Res: TMemo;
    procedure Button_LoginClick(Sender: TObject);
    procedure IdHTTPServer1CommandGet(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure IdHTTPServer1CommandOther(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

const
  sAuth_URL = 'https://accounts.google.com/o/oauth2/v2/auth';
  sToken_URL = 'https://oauth2.googleapis.com/token';

  iAuth_REQ = 0;
  iToken_REQ = 1;

var
  Form1: TForm1;
  iHTTP_ReqType: Byte; // 0 : Auth , 1 : Token

  sAuth_ClientID, sAuth_ClientSecret, sAuth_ReURL, sAuth_Scope, sAuth_Code: String;
  sToken_ReURL, sToken_Secret: String;
  {
    참고 사이트 : https://developers.google.com/identity/protocols/oauth2/web-server?hl=ko
  }

implementation

{$R *.dfm}

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin

  IdHTTPServer1.Active := False;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  iHTTP_ReqType := iAuth_REQ;
  with IdHTTPServer1 do
  begin
    if Active then
    begin
      Active := False;
    end
    else
    begin
      DefaultPort := 80;
      Active := True;
      AutoStartSession := True;
    end;
  end;
end;

procedure TForm1.Button_LoginClick(Sender: TObject);
var
  ss: TStringStream;
  AResponse: IHTTPResponse;
begin
  case iHTTP_ReqType of
    iAuth_REQ:
      begin
        ShellExecute(HANDLE_FLAG_INHERIT, 'Open', '"shell:Appsfolder\Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge"',
          PChar(Memo1.Text), nil, SW_SHOWNORMAL);
      end;
    iToken_REQ:
      begin
        ss := TStringStream.Create('', TEncoding.UTF8);
        try
          with NetHTTPRequest1 do
          begin
            URL := 'https://oauth2.googleapis.com/token';
            AcceptEncoding := 'utf-8';
            CustomHeaders['ContentType'] := 'application/x-www-form-urlencoded';
            Asynchronous := False;

            AResponse := Post(URL, ss);
          end;
        finally
          ss.Free;
        end;
      end;
  end;

end;

procedure TForm1.IdHTTPServer1CommandGet(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
var
  i: Byte;
  sResText: String;
  ResStream: TStream;
begin
  with Memo_Res.Lines do
  begin
    Add('RequestInfo URI : ' + ARequestInfo.URI);
    Add('RequestInfo Command  : ' + ARequestInfo.Command);
    Add('ARequestInfo.Params.Count : ' + IntToSTr(ARequestInfo.Params.Count));
    Add('ARequestInfo.Params.Text : ' + ARequestInfo.Params.Text);
    Add('ARequestInfo.Params.FormParams : ' + ARequestInfo.FormParams);
    Add('ARequestInfo.Params.FormParams : ' + ARequestInfo.UnparsedParams);

    try
      ResStream := ARequestInfo.PostStream;
      if Assigned(ResStream) then
      begin
        ResStream.Position := 0;
        sResText := ReadStringFromStream(ResStream);
        TThread.Synchronize(nil,
          procedure
          begin
            Memo1.Lines.Add(sResText);
          end);
      end;
    finally
    end;

    {


      for i := 0 to ARequestInfo.Params.Count - 1 do
      Add('ARequestInfo.Params' + IntToSTr(i) + ' : ' + ARequestInfo.Params[i]);
    }
    Add('===========================================================');
  end;

  Exit;

  case iHTTP_ReqType of
    iAuth_REQ:
      begin
        with ARequestInfo do
        begin
          for i := 0 to Params.Count - 1 do
          begin
            if Pos('code=', Params[i]) > 0 then
              sAuth_Code := Params[i]
            else if Pos('code=', Params[i]) > 0 then
              sAuth_Code := Params[i];
          end;
        end;

        // sResText := '구글 로그인 성공, 창을 닫고, 앱으로 돌아가주세요.';
        with AResponseInfo do
        begin
          ContentStream := TStringStream.Create(sResText, TEncoding.UTF8);
          ContentType := 'text/html; charset=utf-8';
        end;
        {
          iHTTP_ReqType := iToken_REQ;
          Button_LoginClick(nil);
        }
      end;
    iToken_REQ:
      begin
        with ARequestInfo do
        begin

        end;

      end;

  end;

end;

procedure TForm1.IdHTTPServer1CommandOther(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
begin
  with Memo_Res.Lines do
  begin
    Add('===========================================================');
    Add('IdHTTPServer1CommandOther');
    Add('RequestInfo URI : ' + ARequestInfo.URI);
    Add('ARequestInfo.Params.Count : ' + IntToSTr(ARequestInfo.Params.Count));
    Add('ARequestInfo.Params.Text : ' + ARequestInfo.Params.Text);
    Add('ARequestInfo.Params.FormParams : ' + ARequestInfo.FormParams);
    Add('ARequestInfo.Params.FormParams : ' + ARequestInfo.UnparsedParams);
    Add('ARequestInfo.PostStream : ' + ARequestInfo.PostStream.ToString);

    {


      for i := 0 to ARequestInfo.Params.Count - 1 do
      Add('ARequestInfo.Params' + IntToSTr(i) + ' : ' + ARequestInfo.Params[i]);
    }
    Add('===========================================================');
  end;
end;

end.
