unit uKeyboard;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ImagingComponents, Vcl.ExtCtrls, Vcl.StdCtrls;

type
  TKeyInfo = record
    iTag: Integer;
    sCaption: String;
    iT: Integer;
    iL: Integer;
    iW: Integer;
    iH: Integer;
  end;

  TToolChk = record
    iTool: Integer; // Tool ¹øÈ£
    bTool: Boolean; // Tool À¯¹«
    bShift: Boolean;
    bTab: Boolean;
    bCaps: Boolean;
  end;

  TForm3 = class(TForm)
    procedure KeyClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormResize(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure SEtKeyInfo(iType: Byte);
    procedure SetKeyBoard;
  end;

var
  Form3: TForm3;

  arrKeyInfo: array [0 .. 59] of TKeyInfo;
  ToolChk: TToolChk;

  arrChar: array [0 .. 59] of String = (
    '~ `',
    '! 1',
    '@ 2',
    '# 3',
    '$ 4',
    '% 5',
    '^ 6',
    '& 7',
    '* 8',
    '( 9',
    ') 0',
    '_ -',
    '+ =',
    '| \',
    '¡ç',
    //
    'Tab',
    'Q==¤³ ¤²',
    'W==¤¹ ¤¸',
    'E==¤¨ ¤§',
    'R==¤¢ ¤¡',
    'T==¤¶ ¤µ',
    'Y==¤Ë ¤Ë',
    'U==¤Å ¤Å',
    'I==¤Á ¤Á',
    'O==¤Â ¤À',
    'P==¤Æ ¤Ä',
    '{ [',
    '} ]',
    '==',
    //
    'Caps==Lock',
    'A ¤±',
    'S ¤¤',
    'D ¤·',
    'F ¤©',
    'G ¤¾',
    'H ¤Ç',
    'J ¤Ã',
    'K ¤¿',
    'L ¤Ó',
    ': ;',
    '" ''',
    'Enter',
    //
    'Shift',
    'Z ¤»',
    'X ¤¼',
    'C ¤º',
    'V ¤½',
    'B ¤Ð',
    'N ¤Ì',
    'M ¤Ñ',
    '< ,',
    '> .',
    '? /',
    'Shift',
    //
    'Ctrl',
    'Win',
    'Alt',
    'Space',
    'ÇÑ/¿µ',
    'ùÛí®'
  );

  arrTag: array [0 .. 59] of Integer = (
    192,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    48,
    189,
    187,
    220,
    8,
    //
    9,
    81,
    87,
    69,
    82,
    84,
    89,
    85,
    73,
    79,
    80,
    91,
    93,
    13,
    //
    20,
    65,
    83,
    68,
    70,
    71,
    72,
    74,
    75,
    76,
    59,
    39,
    13,
    //
    16,
    90,
    88,
    67,
    86,
    66,
    78,
    77,
    44,
    46,
    47,
    16,
    //
    17,
    91,
    18,
    32,
    21,
    25
  );

implementation

{$R *.dfm}
{ TForm3 }

procedure TForm3.FormCreate(Sender: TObject);
begin
  SetWindowLong(Self.Handle, GWL_EXSTYLE, WS_EX_NOACTIVATE);
  SetWindowPos(Self.Handle, HWND_TOPMOST, Top, Left ,Width, Height, 0);
  SEtKeyInfo(0);
  SetKeyBoard;
end;

procedure TForm3.FormResize(Sender: TObject);
begin
  if (Width < 550) then
    Width := 550
  else if Height < 200 then
    Height := 200
  else
  begin
    SEtKeyInfo(0);
    SetKeyBoard;
  end;
end;

procedure TForm3.KeyClick(Sender: TObject);
var
  iKey: Byte;
  sKey: String;
  i: Integer;
  j: Integer;

begin
  for i := ControlCount - 1 Downto 0 do
  begin
    if Controls[i] is TLabel then
    begin
      with (Controls[i] as TLabel) do
      begin
        Color := clBlack;
        Font.Color := clWhite;
      end;
    end;
  end;
  if Sender is TLabel then
  begin
    with (Sender as TLabel) do
    begin
      Color := clYellow;
      Font.Color := clBlack;
      iKey := Tag;
      sKey := Hint;
    end;
  end;

  Caption := 'Press' + IntToStr(iKey);

  if (sKey <> '') AND (ToolChk.bTool = False) then
  begin
    ToolChk.bTool := True;
    ToolChk.iTool := iKey;
    Keybd_Event(ToolChk.iTool, MapVirtualKey(ToolChk.iTool, 0), 0, 0);
    case iKey of
      16:
        begin
          ToolChk.bShift := True
        end;
    end;
    Exit;
  end;

  Keybd_Event(iKey, MapVirtualKey(iKey, 0), 0, 0);
  Keybd_Event(iKey, MapVirtualKey(iKey, 0), KEYEVENTF_KEYUP, 0);

  if ToolChk.bTool then
  begin
    ToolChk.bTool := False;
    Keybd_Event(ToolChk.iTool, MapVirtualKey(ToolChk.iTool, 0), KEYEVENTF_KEYUP, 0);
    if ToolChk.bShift then
      ToolChk.bShift := False;
  end;
end;

procedure TForm3.SetKeyBoard;
var
  i, j: Integer;
begin
  //
  with Font do
  begin
    Size := 16;
    Name := 'µ¸¿òÃ¼';
    style := [fsBold];
  end;

  for i := ControlCount - 1 Downto 0 do
  begin
    (Controls[i]).Free;
  end;

  for i := Low(arrKeyInfo) to High(arrKeyInfo) do
  begin
    with TLabel.Create(Self), arrKeyInfo[i] do
    begin
      Parent := Self;
      WordWrap := True;
      AutoSize := False;
      Layout := tlCenter;
      Alignment := taCenter;
      Transparent := False;
      Color := clBlack;

      Tag := arrKeyInfo[i].iTag;
      Caption := sCaption;
      if i in [15, 42, 53, 54, 56] then
        Hint := 'Tool'
      else
        Hint := '';

      Top := iT;
      Left := iL;
      Width := iW;
      Height := iH;

      OnClick := KeyClick;
    end;
  end;

end;

procedure TForm3.SEtKeyInfo(iType: Byte);
const
  s13 = #13#10;
  iPadding = 7;
  WType_1 = 1.5;
  WType_2 = 2.0;
  WType_3 = 2.5;
var
  iWidth: Integer;
  i, j, k, l: Integer;
begin
  //
  k := 0;
  j := 0;
  iWidth := 10;
  for i := Low(arrKeyInfo) to High(arrKeyInfo) do
  begin
    with arrKeyInfo[i] do
    begin
      iTag := arrTag[i];
      sCaption := StringReplace(arrChar[i], ' ', '  ' + Chr(13) + '  ', [rfIgnoreCase]);
      sCaption := StringReplace(sCaption, '==', ' ', [rfReplaceAll]);

      iH := ClientHeight div 5 - iPadding;
      iW := ((Self.Width div 16) - iPadding) + 3;
      iT := k * (Self.Height div 5 - iPadding);
      case i of
        0 .. 14: // 1
          begin
            if i = 14 then
              inc(k);
          end;
        15 .. 28:
          begin
            if i = 15 then
              iWidth := 10;
            if i = 28 then
            begin
              iH := iH + 10;
              inc(k);
            end;

            if i in [15, 28] then
              iW := Round(iW * WType_1);
          end;
        29 .. 41:
          begin
            if i = 29 then
              iWidth := 10;
            if i = 41 then
              inc(k);

            if i in [29, 41] then
              iW := Round(iW * WType_2);
          end;
        42 .. 53:
          begin
            if i = 42 then
              iWidth := 10;
            if i = 53 then
              inc(k);

            if i in [42, 53] then
              iW := Round(iW * WType_3);
          end;
        54 .. 59:
          begin
            if i = 54 then
              iWidth := 10;
            if i = 57 then
              iW := Round((iW * WType_1) * 5)
            else
              iW := Round(iW * WType_1);

          end;
      end;

      iL := iWidth;
      if i = 14 then
        l := iW + iL;

      if i in [28, 41, 53, 59] then
        iW := l - iL;

      iWidth := iWidth + iW + iPadding;
      // iL := j * iW + 10;
      inc(j);
    end;
  end;

end;

end.
